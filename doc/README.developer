Purpose of this document
------------------------
This document is the starting point for developers that want to familiarize
themselves with the Little Go project, i.e. developers that are new to the
project, and also me, after I come back to the project after several months
or years :-)


Folder structure
----------------
<root>
 +-- LICENSE           The Apache license file.
 +-- NOTICE            Attribution notices.
 +-- 3rdparty          This folder does not exist in a pristine clone of the
 |                     Git repository. It is created when the 3rdparty software
 |                     packages required to run Little Go are downloaded and
 |                     built.
 +-- doc               This folder contains documents not relevant for building
 |                     the Little Go binary; some of these files are included
 |                     in the application bundle that is distributed on the
 |                     App Store.
 +-- doxygen           This folder contains a configuration file Doxyfile for
 |                     Doxygen; the folder is intended to receive the files
 |                     generated by Doxygen.
 +-- resource          This folder contains the project's resources such as the
 |                     .xib files.
 +-- script            This folder contains command line scripts.
 +-- src               This folder contains the project's source code.


Document reference
------------------
Documents described here are located in the Documents folder.

README
  This document is the starting point for end users. It provides a quick
  overview of what Little Go is about, points to other interesting documents
  of the project, and also contains other important information that should be
  immediately accessible to new or recurring users.

INSTALL
  This document provides instructions on how to obtain a copy of the source
  code of Little Go and how to build the project with Xcode into an executable
  application.

TODO
  This document contains a list with not-so-important features (aka
  "good ideas" :-); the list is sorted by priority, which provides a rough
  indicator in what order the features should be implemented. Things listed
  in the Roadmap are much more important and should be implemented before
  things in TODO.

Roadmap
  This document contains a list with important features and the order in
  which they should be implemented. The purpose of this list is to avoid
  distraction by the "good ideas" listed in TODO, which may sometimes be more
  attractive to implement but are not this important.

ChangeLog
  This document should not duplicate SCM log messages. Its entries should be
  rather high-level so that it can be used as a source for release notes, e.g.
  to populate the "Changes in this release" section in the README document.
  Examples for things that should be included in the ChangeLog:
  - Fixes for distinct bugs, with or without a bug report in the bug tracker
  - New features, with or without a bug report in the bug tracker
  - Other "big" changes that are noticable by the users of the software
    (e.g. the program icon has changed)
  - Things that may not be noticable but that need to be brought to the
    attention of the users of the software (e.g. a license change)

ReleaseSteps
  This document lists the steps needed to make a project release.


Other files
-----------
Little Go.xcodeproj
  The Xcode project file. The format is "Xcode 3.1-compatible".

resource/Info.plist
  The information property list file that describes the Little Go application
  bundle.

script/get-and-build-3rdparty-software.sh
  Helper script for downloading and building all 3rdparty software packages that
  are required to build and run Little Go.


Build system configuration
--------------------------
Important configuration settings in Xcode:
- HEADER_SEARCH_PATHS = ./3rdparty/install$(SDKROOT)/include
- LIBRARY_SEARCH_PATHS = ./3rdparty/install$(SDKROOT)/lib
- OTHER_LDFLAGS = -lfuego -lboost_system -lboost_thread -lboost_filesystem -lboost_program_options
  Note: If a future version of Fuego requires additional Boost libraries, they
  must be added here.
- GCC_PREPROCESSOR_DEFINITIONS = NDEBUG
  Note: This macro is required because the project links against a release
  build of Fuego.


Platform notes
--------------
- The Xcode project is prepared to build Little Go both for iOS and for the
  iPhone Simulator.
- The base SDK is "Latest iOS", which means that the project is set up with a
  moving target SDK. The latest release of the project was made with iOS 4.2.
- The deployment target is not set, which means that it defaults to the same
  version as the base SDK.


.xib design notes
-----------------
I find it difficult to remember some specialities about the UI design in the
various .xib files. The following notes are to .xib files what inline
documentation is to source code:
- MainWindow.xib instantiates the main controller object, which is an instance
  of TabBarController. The main controller in turn references and instantiates
  all child controllers. To see the class of each sub-controller, select the
  main controller object in the .xib file, then from the menu select
  View -> as Columns. Navigate to the child controller of your choice and
  display its properties in the Inspector window. The properties include the
  controller's class, and the name of the NIB file associated with the
  controller.


Implementation notes
--------------------
- Error handling: TODO
- Thread synchronization: TODO
- Memory management: Uses retain/release, there is no garbage collection on iOS.
- Communication with Fuego: Usually this is done by running Fuego in a separate
  process and then attaching an output and an input stream to that process'
  stdin and stdout. Since iOS does not allow to launch other processes, a
  different solution is required. What works very nicely is to run the Fuego
  engine in a secondary thread and to let it attach its input/output streams to
  a pair of named pipes. The Fuego client also runs in a secondary thread and
  attaches two complementary streams to the same pair of named pipes.
  Synchronization between the two threads is achieved through the pipes'
  blocking behaviour.


Coding guidelines
-----------------
- Class names start with an uppercase letter
- Method names start with a lowercase letter
- Member variables use the the prefix "m_" to distinguish them from variables
  that are local to a method
- Spaces, no tabs
- 2 spaces per indentation level
- Opening/closing braces are placed on their own line
- No space is used to separate opening/closing paranthesis from the expression
  they surround
- Operators (e.g. "+" in string concatenations) are separated by spaces from
  their operands
- Lines should not be longer than 80 characters; for comment lines this limit
  is much stricter than for lines of code
- Setter/getter methods should be named after the property they encapsulate
  (e.g. getter = icon(), setter = setIcon:())
- Private methods of a class are declared in a category named "Private" which is
  declared in the .m file
- Everything should be documented with Doxygen documentation blocks


Source code documentation with Doxygen
--------------------------------------
There is a "doxygen" target that can be used to transform the source code
documentation into a set of HTML files. The target uses a shell script that
assumes that Doxygen is installed in

  /sw/bin

This is the standard path for the "fink" project. If you have doxygen installed
somewhere else (e.g. /usr/local/bin) you need to change the target's shell
script.

The Doxygen configuration file is located in

  doxygen/Doxyfile

Notes about the configuration:
- Doxygen recursively searches for *.h and *.m files, starting from the project
  base directory.
- Private methods declared in categories in the .m files are not included in
  the documentation process. Change this by setting EXTRACT_LOCAL_METHODS = YES
  inside Doxyfile.
- It is assumed that the command line tool "dot" is available and installed in
    /sw/bin
  dot is part of the Graphviz package and is used to generate a couple of
  diagram types (e.g. class diagrams, collaboration diagrams).


iOS topics covered in this project
----------------------------------
Little Go uses declared properties, some of them generated, others added
manually. Although declared properties are a language feature introduced to
Objective-C quite some time ago, this is still a new topic for me. Details can
be found in [1].

The Fuego engine runs in a secondary thread, and communication with the engine
also occurs within a secondary thread. Basic understanding of how threading and
run loops work can be found in [2]. Scheduling with NSTimer is covered by [3].

Little Go is quite configurable and has a preference tab to manage all the
settings. This requires the "User Defaults" system (see [4]).

[5] explains the nib object lifecycle. This information is helpful for proper
cleanup during application shutdown. This document also contains information
on how to obtain references to resources embedded in the application bundle
(e.g. sound or image files).

Rendering a Go board in a UIView involves drawing with the Core Graphics and
UIKit frameworks. An introduction to drawing is provided by [6], more specific
information about drawing in Quartz is in [7].

[1]  iOS Reference Library > Guides > The Objective-C Programming Language > Declared Properties
[2]  iOS Reference Library > Guides > Threading Programming Guide
[3]  iOS Reference Library > Guides > Timer Programming Topics
[4]  iOS Reference Library > Guides > User Defaults Programming Topics
[5]  iOS Reference Library > Guides > Resource Programming Guide
[6]  iOS Reference Library > Guides > Drawing and Printing Guide for iOS
[7]  iOS Reference Library > Guides > Quartz 2D Programming Guide


3rdparty software
-----------------
Before the first Xcode build of the project is possible, 3rdparty software must
be downloaded and built. Hopefully, the convenience script does all this for
you if you run it on the command line from the project root folder:

  ./script/get-and-build-3rdparty-software.sh


Compilation command
-------------------
The following lines represent the command to compile a single .cpp file in
Debug configuration for the iPhoneSimulator platform. Every line contains one
compiler switch or command-line argument.

/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/gcc-4.2
-x c++
-arch i386
-fmessage-length=0
-pipe
-Wno-trigraphs
-fpascal-strings
-fasm-blocks
-O0
-Wreturn-type
-Wunused-variable
-DNDEBUG
-isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.2.sdk
-fexceptions
-fvisibility=hidden
-fvisibility-inlines-hidden
-mmacosx-version-min=10.6
-gdwarf-2
-D__IPHONE_OS_VERSION_MIN_REQUIRED=40200
-iquote "/Users/patrick/Documents/dev/littlego/build/Little Go.build/Debug-iphonesimulator/Little Go.build/Little Go-generated-files.hmap"
"-I/Users/patrick/Documents/dev/littlego/build/Little Go.build/Debug-iphonesimulator/Little Go.build/Little Go-own-target-headers.hmap"
"-I/Users/patrick/Documents/dev/littlego/build/Little Go.build/Debug-iphonesimulator/Little Go.build/Little Go-all-target-headers.hmap"
-iquote "/Users/patrick/Documents/dev/littlego/build/Little Go.build/Debug-iphonesimulator/Little Go.build/Little Go-project-headers.hmap"
-F/Users/patrick/Documents/dev/littlego/build/Debug-iphonesimulator
-I/Users/patrick/Documents/dev/littlego/build/Debug-iphonesimulator/include
-I3rdparty/install/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.2.sdk/include
"-I/Users/patrick/Documents/dev/littlego/build/Little Go.build/Debug-iphonesimulator/Little Go.build/DerivedSources/i386"
"-I/Users/patrick/Documents/dev/littlego/build/Little Go.build/Debug-iphonesimulator/Little Go.build/DerivedSources"
-include /var/folders/K+/K+NmKFX-FA4IgmDBY9aGdk+++TM/-Caches-/com.apple.Xcode.502/SharedPrecompiledHeaders/Little_Go_Prefix-gatqaltedfwqgcbkvwvyfnixuhqh/Little_Go_Prefix.pch
-c /Users/patrick/Documents/dev/littlego/src/MyClass.cpp
-o "/Users/patrick/Documents/dev/littlego/build/Little Go.build/Debug-iphonesimulator/Little Go.build/Objects-normal/i386/MyClass.o"

Discussion of options not used in 3rdparty builds:
-x c++
  The language of the source file. No need to set this, so far I am happy with
  the default language selection of the compiler.
-fmessage-length=0
  Error messages are not line-wrapped. No need to set this, has no influence on
  the code produced.
-Wno-trigraphs
  A warning. No need to set this, has no influence on the code produced.
-fpascal-strings
  APPLE ONLY. Allow Pascal-style string literals. No need to set this, this is
  arcane and as far as I'm concerned have no influence on the code produced.
-fasm-blocks
  APPLE ONLY. Allow assembly code within a C/C++ file. No need to set this,
  this is arcane and as far as I'm concerned have no influence on the code
  produced.
-O0
  Optimization. This is set differently for 3rdparty libraries by design.
-Wreturn-type
  A warning. No need to set this, has no influence on the code produced.
-Wunused-variable
  A warning. No need to set this, has no influence on the code produced.
-fexceptions
  Enable exception handling. No need to set this, is already enabled by default
  for languages like C++ that support exceptions.
-mmacosx-version-min=10.6
  Same as MACOSX_DEPLOYMENT_TARGET.
-D__IPHONE_OS_VERSION_MIN_REQUIRED=40200
  No need to set this, iOS target version for 3rdparty libraries is defined
  via IPHONE_DEPLOYMENT_TARGET.
-iquote /some/include/path
  Specifies that this include path is searched for includes that were specified
  with quotes, but not for those specified with angle brackets (<>). No need to
  set this, has no influence on the code produced.


Boost build/installation issues
-------------------------------
No issues, build works out of the box.


Fuego build/installation issues
-------------------------------
Build
- The build script needs to specify the configure flag --with-boost-libdir,
  otherwise configure aborts with a linker error.

Installation
- "make install" only copies the executables (fuego, fuego_test), but not the
  libraries nor the headers. The build script for Fuego applies a patch that
  modifies a number of Makefile.am files. The change made is to rename the
  "noinst_HEADERS" property to "nobase_pkginclude_HEADERS". Notes:
  - Headers are installed under
      <prefix>/include/fuego
    because "pkginclude" is used instead of "include". In theory, sub-folders
    should also be kept because of "nobase", e.g.
      <prefix>/include/fuego/gtpengine
    For unknown reasons, this does not work. I have tried the following
    combinations, but could not get it to work as desired:
      pkginclude_HEADERS     -> installs into include/fuego/*
      nobase_include_HEADERS -> installs into include/*
      nobase_dist_HEADERS    -> installs into include/*
- In addition, the build script creates and installs a single unified library
  that contains all the object files within Fuego's separate library files.


Changes to the Fuego source code
--------------------------------
1) FuegoUtil::FuegoMain()
- Create a new function FuegoUtil::FuegoMain(int argc, char** argv) in
  FuegoUtil.cpp and FuegoUtil.h
- Move the implementation in main(int argc, char** argv) from FuegoMain.cpp to
  this new function in FuegoUtil.cpp
- Also move the other support functions from FuegoMain.cpp to FuegoUtil.cpp
- Invoke FuegoUtil::FuegoMain() from main()

2) Add 2 new command line options "--input-pipe /path/to/pipe" and
   "--output-pipe /path/to/pipe"
- Basic option support requires modification to ParseOptions() and introduction
  of two new global variables
- Actual usage of the specified pipes requires modification to FuegoMain().
- Additional option support to check for mutually exclusive options
  (--input-file and --input-pipe) requires addition of a new function
  MutuallyExclusiveOptions() which is invoked from ParseOptions()

3) Remove usage of exit() in Help()
- ParseOptions() must be modified to return a value that indicates to its
  caller (FuegoMain()) whether the program should continue running or whether
  it should be terminated


Fuego Patch
-----------
The changes to the Fuego build system (Makefile.am files) and source code
can be nailed down with a patch.

Creation of the patch file:
  diff -ruN fuego-1.0-original fuego-1.0-new >fuego.patch

Application of the patch file:
  patch -p1 fuego.patch
