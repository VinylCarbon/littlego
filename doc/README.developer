Purpose of this document
------------------------
This document is the starting point for developers that want to familiarize
themselves with the Little Go project, i.e. developers that are new to the
project, and also me, after I come back to the project after several months
or years :-)


Quick-start guide on how to build and run Little Go
---------------------------------------------------
1. Unpack the source tar ball or clone the Git repository (since you are
   reading this document you probably have done this already)
2. Install the latest version of Xcode if you haven't done so already
3. Edit script/build-env.sh to match your development environment. Most
   important are the "Base SDK" variables which must refer to an iOS SDK that
   you have installed on your development machine. Usually, the version of Xcode
   that you have installed also determines which iOS SDK version is installed.
4. Launch Terminal.app and execute these commands:
     cd /path/to/littlego
     ./script/get-and-build-3rdparty-software.sh
5. Wait until the script has downloaded and built all 3rdparty software packages
   (see the file "NOTES.build.3rdparty" for more details). This will take
   substantial time, for instance my 2.33 GHz Core 2 Duo laptop requires nearly
   one hour for building everything.
6. Launch Xcode by opening "Little Go.xcodeproj"
7. Make sure that the Xcode project's Base SDK and deployment target versions
   match the versions you have in your script/build-env.sh file (see step 3).
8. Select the "Little Go Debug" scheme, and one of the iPhone or iPad simulator
   destinations, from the toolbar's scheme selector
9. From the menu select Product > Run. The app should now be built in Debug
   mode and launched inside the simulator.


Folder structure
----------------
<root>
 +-- LICENSE           The Apache license file.
 +-- LICENSE.html      The Apache license in HTML format (for display on the
 |                     device).
 +-- NOTICE            Attribution notices.
 +-- README.md         Introduction to the project. This file is formatted in
 |                     Markdown and rendered as the front page on GitHub.
 +-- 3rdparty          This folder does not exist in a pristine clone of the
 |                     Git repository. It is created when the 3rdparty software
 |                     packages required to run Little Go are downloaded and
 |                     built.
 +-- doc               This folder contains documents not relevant for building
 |                     the Little Go binary; some of these files are included
 |                     in the application bundle that is distributed on the
 |                     App Store.
 +-- doxygen           This folder contains a configuration file Doxyfile for
 |                     Doxygen; the folder is intended to receive the files
 |                     generated by Doxygen.
 +-- patch             This folder contains files used to patch 3rdparty
 |                     software before the build
 +-- resource          This folder contains the project's resources such as the
 |                     .xib files.
 +-- script            This folder contains command line scripts.
 +-- src               This folder contains the project's source code.
 +-- test              This folder contains the project's unit test files.


Document reference
------------------
Documents described here are located in the Documents folder.

ReleaseSteps
  This document lists the steps needed to make a project release.

MANUAL
  This document contains a complete documentation of the application's end user
  functionality in prose. The file is parsed and displayed in game under the
  "Help" tab. For this to work, the content of this file must follow certain
  guidelines that are documented in DocumentGenerator.h.

NOTES.Build
NOTES.Build.3rdparty
  These documents have detailed notes about the third-party software build
  process, and the project's own build process.

NOTES.Architecture
NOTES.Design
littlego.asta
*.jpg
  These documents contain some thoughts that went into architecture and design
  of the project. There are also a few UML diagrams floating around as .jpg
  files. The origin of these diagrams is the Astah project file littlego.asta.
  To open that file you need to install the UML tool Astah - a free community
  edition is available for download here: http://astah.net/

NOTES.Diagnostics
  This document contains instructions what to do with the diagnostics
  information file that is attached to bug report emails.


Other files
-----------
Little Go.xcodeproj
  The Xcode project file. The format is "Xcode 3.2-compatible".

resource/plist/Info.plist
  The information property list file that describes the Little Go application
  bundle. Certain aspects of the Info.plist file are covered in more detail
  in the document NOTES.Info-plist

script/get-and-build-3rdparty-software.sh
  Helper script for downloading and building all 3rdparty software packages that
  are required to build and run Little Go. See NOTES.Build.3rdparty for
  details.


Version control
---------------
The version control system used to maintain this project is Git. The canonical
repository currently resides on GitHub:
- URL for cloning: git://github.com/herzbube/littlego.git
- URL for browsing: https://github.com/herzbube/littlego

The branching model adopted by the project is described in this article:
http://nvie.com/posts/a-successful-git-branching-model/.


Bugtracking
-----------
The bugtracker for the Little Go project is located on GitHub [1]. If you want
to submit a new issue you must be a registered GitHub user (it's free and they
won't bother you with spam!).

Before version 0.9.1, all issues were tracked on my private bugtracker [2]. If
you are really desperate about the project's history :-) you can browse the few
but closed bugs that are still floating around there.

[1] https://github.com/herzbube/littlego/issues
[2] https://bugs.herzbube.ch/


Source code documentation with Doxygen
--------------------------------------
There is a "doxygen" target that can be used to transform the source code
documentation into a set of HTML files. The target uses a shell script that
assumes that Doxygen is installed in

  /opt/local/bin

This is the standard path for the MacPorts project. If you have doxygen
installed somewhere else (e.g. /sw/bin, /usr/local/bin) you need to change the
target's shell script.

The Doxygen configuration file is located in

  doxygen/Doxyfile

Notes about the configuration:
- Doxygen recursively searches for *.h, *.m and *.mm files in the project
  top-level folder "src".
- Private methods declared in class extensions or categories in the .m files
  are not included in the documentation process. Change this by setting
  EXTRACT_LOCAL_METHODS = YES inside Doxyfile.
- Doxyfile is configured to look for the command line tool "dot" in
    /opt/local/bin
  dot is part of the Graphviz package and is used to generate a couple of
  diagram types (e.g. class diagrams, collaboration diagrams).
