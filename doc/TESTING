Purpose of this document
------------------------
This document has information about how the project's automated testing
facilities work. It also contains a script for manual testing of most of the
application's features. The intent is to execute the script before a new
version is released to the App Store.


Automated Unit tests
--------------------
All unit test related files are located in the top-level folder "test".

The Xcode project defines a target "Unit tests" which builds a unit test bundle,
then immediately runs the tests in its "Run Script" phase.

To make the unit tests build & run automatically every time the main target is
built, I usually make sure that in all of my Xcode schemes the checkbox "Run" is
checked not only for the main target, but for the unit test target as well.
Note that the same result can also be achieved by a target dependency.

Notes about the "Unit test" target:
- All tests in this target are what Apple calls "logic tests" (see [1]), i.e.
  unit tests exercise more or less isolated classes. The test source code is
  built using the iOS Simulator SDK, but the tests are run outside of the
  simulator as part of the build process.
- All source code files that are unit tested must be added to the "Unit test"
  target so that they are built for that target.
- The build setting "Header Search Path" is set to the value "./src". Since the
  test sources are completely separated from the normal application sources, I
  don't want to deal with relative path issues for each #import statement. The
  application can be seen as third party software from the point of view of the
  unit test bundle.
- Because application source files depend on the presence of a prefix header,
  the "Unit test" target has to have the same "Prefix header" build settings
  as the main application target.
- Compiling ApplicationDelegate for the "Unit test" target pulls in Fuego/Boost
  (via GTP classes) as dependencies. As a consequence, the "Unit test" target
  must be set up with Header/Library search paths that are the same as in the
  main application target.
  - Additionally, the build setting "Symbols hidden by default" must be set to
    YES to prevent build warnings because of symbol visibility differences
    between Fuego/Boost libraries and the unit test bundle. For some unknown
    reason, this build setting is correct by default in the main application
    target, but incorrect in the "Unit test" target.

A final note about logging: The log file for unit tests run in the simulator
environment is located in
~/Library/Application Support/iPhone Simulator/Documents/Logs.

[1] http://developer.apple.com/library/ios/#documentation/Xcode/Conceptual/iphone_development/135-Unit_Testing_Applications/unit_testing_applications.html


Automated UI tests
------------------
The Instruments application can be used to run automated UI tests. The details
are described in [1], but the gist is the following
- Tests can be executed both on a real device and in the simulator
- The test script is written in JavaScript using the UI Automation API to
  simulate user actions. The API makes use of the underlying accessibility
  mechanism to target the app's UI elements from outside of the app.
- Only apps code signed with the developer's provisioning profile can be
  tested

After a bit of looking around, I noticed the Appium project [3] which looks
interesting because it allows to write platform-independent test scripts in
various languages. After a bit of fumbling, I got a basic test setup working
using the following steps:

1. Install Node.js and its package manager (npm) using MacPorts and while
   logged in as a user with admin privileges
     sudo port install nodejs
     sudo port install npm
2. While logged in as non-privileged dev user
     cd /path/to/littlego
     npm install appium
     npm install wd
   This installs stuff locally into the subfolder "node_modules". I added the
   subfolder to .gitignore.
3. Run the Appium server in one console window
     ./node_modules/.bin/appium
4. Run the test script
     node simplest.js
   This is an extremely simple test script that launches the app, taps the
   "Computer play" button, and then quits the app. In order for this to work
   I have added a bit of code that assigns accessibility labels to various
   navigation bar and toolbar buttons.

The thing that needs to be done next is to write tests. I have made a bit of
research and decided on the following ground rules:
- Tests must be written in JavaScript. I decided on this language because, in
  order for Appium to run you already need Node.js installed, so there seems to
  be little point in adding new dependencies to the project for a new scripting
  language such as Ruby and its WebDriver bindings.
- A useful style guide how to write JavaScript for Node.js can be found on [4].
  The guide is pretty sensible, I especially like the recommendation to name
  closures, and NOT to nest closures. I intend to deviate from the guide in the
  following ways:
   - Use double quotes, not single quotes
   - Put opening braces go on their own line
- Useful links
  - General Appium stuff [6]
  - Hint for how to wait for a disabled button to become enabled [7]
  - The JSO Wire Protocol [8]
  - Learning notes for JavaScript [9]
  - Docs about Apple's UIAutomation [10], [11]


Some things that look like trouble:
- It takes very long to run even the simplest test. It should be possible to
  do this more quickly, otherwise the write-test / run-test cycle will be
  too cumbersome.
- At the moment it looks as if the Simulator app needs to be quit whenever the
  test script crashes. Look into ways how this can be prevented.
- Find out how to say that we want to start the simulator for iPhone or iPad.
  A hint can be found here [5].


Links
[1] http://developer.apple.com/library/ios/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/UsingtheAutomationInstrument/UsingtheAutomationInstrument.html
[2] http://developer.apple.com/library/ios/#documentation/DeveloperTools/Reference/UIAutomationRef/
[3] http://appium.io/
[4] http://nodeguide.com/style.html
[5] https://saucelabs.com/appium/tutorial/2
[6] https://github.com/appium/appium/wiki/_pages
[7] http://stackoverflow.com/questions/9161773/how-can-i-get-selenium-web-driver-to-wait-for-an-element-to-be-accessible-not-j
[8] http://code.google.com/p/selenium/wiki/JsonWireProtocol
[9] http://wiki.herzbube.ch/index.php/LearningJavaScript
[10] http://developer.apple.com/library/ios/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/UsingtheAutomationInstrument/UsingtheAutomationInstrument.html
[11] http://developer.apple.com/library/ios/#documentation/DeveloperTools/Reference/UIAutomationRef/_index.html


Script for manual testing
-------------------------
Preconditions
- Perform tests on a real device, not in the simulator
- Remove the app bundle from the device under test so that all preferences and
  saved games are erased
- Create a build with the "Distribute_AdHoc" configuration and install that
  build on the device via ad-hoc distribution
- Perform tests while not connected to Xcode


Basic tab functionality
- Launch application
- Briefly activate all tabs
- On the settings tab check that all user preferences use factory default
  settings
- On the archive tab check that no saved games are present
- On the diagnostics tab check the GTP log: Because this is the first time that
  the application is started and no backup game is present, the following
  commands must be visible in the log:
  - book_load
  - clear_board
  - boardsize
  - komi
  - commands for applying profile settings (e.g. uct_max_memory)
- On the "More" tab, go through all the documents once and check that they
  are properly displayed


Basic game play functionality
- Switch back to the play tab
- The navigation bar at the top displays the following buttons
  - Computer play
  - Pass
  - Game Info
  - Game Actions
- All buttons are enabled
- Tap the "game info" button
- The "Game Info" view slides into view, covering the entire content of the
  play tab
  - The navgation bar contains a "back" button and a segmented control with the
    following segments: Score, Game, Board
  - The Score segment is selected
- Select the "Game" segment. Check that the information presented matches the
  factory defaults: No handicap, board size 9, komi 6.5, black player is
  "Anonymous", white player is "Fuego".
- Tap "back" to dismiss the "Game Info" view; the view slides away to once more
  reveal the game board and other UI elements of the play tab
- Touch the screen & keep touching
- The stone must appear immediately.
  - iPhone: The stone must appear some distance above the fingertip location
  - iPad: The stone must appear directly under the fingertip
- Drag the cross-hair around the board: The status line must continuously be
  updated to show the coordinates of the current position
- Move the stone outside of the board area, then release the finger: No stone
  must be placed
- Place a stone. The computer player must immediately respond with a move. This
  indicates that the opening book is present.
- In the Play view settings, set the move numbers slider to its lowest value,
  then switch back to the Play tab
- The white stone is marked with the symbol for the last stone that was placed
- The "discard" button has now become visible
- Tap the "computer play" button. The computer must generate a move on behalf of
  black, then respond with its own move for white.
- Tap the "Pass" button. No black stone must be placed, the computer must
  respond with a move for white
- Display the "Game Info" view. The "Game" segment must already be selected.
  The "game state" section must display updated information. Dismiss the
  "Game Info" view.
- Tap the "Discard" button repeatedly until no stones are left on the board
- Each discard must remove one move
- When all moves have been discarded, the "discard" button must no longer be
  visible
- Display the "Game Info" view. The "game state" section on the "game" segment
  must show that the game is already in progress. The "move statistics" section
  must show zero moves. Dismiss the "Game Info" view.
- Generate a few moves using the "computer play" button. At some point the
  computer will start to take longer for calculating moves. The status line
  must display two distinct messages: "Computer is playing for <player name>"
  and "<player name> is thinking".
- Tap the "computer play" button. While the computer is thinking the regular
  buttons are replaced by the "interrupt" button
- Tap the "interrupt" button. The computer immediately stops thinking and plays
  a move.
- Tap the "action" button. A menu must appear that displays the following
  buttons: Score, Resign, Save game and New game. On the iPhone there is also
  a Cancel button.
- Tap cancel (iPhone) or tap outside of the menu area (iPad). The menu must be
  dismissed without any action taking place.


Play view user preferences
- Disable the "mark last move" user preference
- The last move must no longer be marked with a symbol
- Re-enable the "mark last move" user preference
- The last move must now again be marked with a symbol
- Move the slider "stone distance from fingertip" to its lowest setting
- While panning, the stone must now be drawn at the fingertip location
- Move the slider "stone distance from fingertip" to a medium setting
- While panning, the stone must now again be drawn some distance above the
  fingertip location
- Enable the user preferences "play sound" and "vibrate"
- When running the following tests on the iPad, ignore any discussion on
  vibration feedback because the iPad does not support vibration
- Let the computer player make a move
- There must be both an audio and a vibration feedback
- Mute the device, then let the computer player make a move
- There must be no audio feedback, only a vibration feedback
- Turn off vibration in the system preferences, then let the computer player
  make a move
- There must be neither audio nor vibration feedback
- Turn the device settings back to normal so that vibration is on and the device
  is not muted. This is important for subsequent tests.
- Tap "computer play"
- There must be neither audio nor vibration feedback when the computer generates
  the move on behalf of the player.
- Wait until the computer has generated its own move. Now there must be both
  audio and vibration feedback.


Testing "save game"
- Tap the "action" button, then select "save game"
- A modal screen must pop up that lets the user enter a name for the saved game
- The name is already filled in with a default name that follows the pattern
  "<black player name> vs. <white player name> 1".
- Tap cancel. The screen must disappear, and on the archive tab no new game must
  be visible.
- Tap the actions button, then select "save game". Clear the game name text
  field. The "done" button must become disabled.
- Enter a name for the game, then tap "done". On the archive tab a new game must
  be visible with the name you just entered
- The entry must display the date and time when the game was saved
- Save another game, this time accept the default name with the suffix "1"
- Save a third game. The default name must now have the suffix "2"
- On the archive tab, all three games appear sorted by file name
- Try saving a game with the character "/" in the name. An error message must be
  displayed that explains that the game name contains an illegal character.
  The message must enumerate all characters that are illegal. Tapping OK must
  dismiss the error message, the screen with the illegal game name must become
  available for editing once more.
- Try saving a game with the name "." (a full stop). Same behaviour as above,
  with a different error message that explains that the game name consists of
  a reserved word.


End of game / Resigning
- Tap the "action" button and select "resign".
- Scoring mode is now activated. The status line displays a message "scoring in
  progress" while the initial set of dead stones is determined.
- After the initial set of dead stones has been determined, the status line
  displays scoring information, and the navigation bar displays the "done" and
  "discard" buttons
- Display the "Game Info" view. The "game state" section on the "game" segment
  must show that the game has ended. Dismiss the "Game Info" view.
- Tapping the "action" button reveals a menu with a reduced set of game actions:
  Undo resign, Save game, New game
- Select "save game" and save another game, which must appear on the archive tab
- Tap "done"
- The "done" button disappears, only the "discard" button remains in the
  navigation bar. The scoring markup disappears from the board. The status line
  message is "game has ended by resigning, <color> resigned".
- Select "score" from the "action menu
- Scoring mode is activated again, with the same effects as described above
- Tap "done"
- Select "undo resign" from the "action" menu
- The navigation bar again displays the three buttons "computer play", "pass"
  and "discard"
- Display the "Game Info" view. The "game state" section on the "game" segment
  must show that the game is in progress. Dismiss the "Game Info" view.
- Disable the user preference Scoring > Score when game ends
- Select "resign" from the "action" menu
- Scoring mode is not activated. The navigation bar displays only the "discard"
  button
- Tap "discard"
- The navigation bar again displays the three buttons "computer play", "pass"
  and "discard"
- Display the "Game Info" view. The "game state" section on the "game" segment
  must show that the game is in progress. Dismiss the "Game Info" view.
- Enable the user preference Scoring > Score when game ends. This is important
  for subsequent tests.


New game
- Tap the actions button and select "new game"
- A modal screen must pop up that lets the user enter parameters for the new
  game
- The default values on all segments must match the factory defaults. For
  human players, "Anonymous" must be pre-selected. For computer players, "Fuego"
  must be pre-selected.
- Select the "human vs. human" segment, then change the parameters to the
  following values:
  - Black = Anonymous
  - White = Anonymous
  - Board size = 13
  - Handicap = 4
  - Komi = 1/2
- For all parameters, a modal screen must pop up that lets the user enter the
  new parameter value
- For all parameters, test that the cancel button dismisses the modal screen
  without changing the value on the "new game" screen
- On the player selection screen, only human players are available for selection
- Tap cancel. The screen must disappear without a new game being started
- Again select "new game". The screen must appear with the "human vs. human"
  segment initially being selected. All parameter values must be the same as
  when the "new game" screen was dismissed with "cancel".
- Tap "done"
- All stones from the previous game are cleared
- The board is displayed using the new size 13x13
- 4 handicap stones are placed on the 4 corner star points
- The navigation bar displays the same buttons as when the application was
  launched for the first time
- Tap the "Game Info" button and check that the information displayed matches
  the parameters that were just entered
- Select "new game"
- Check that on all segments where a computer player can be selected, only
  computer players are actually available for selection
- Tap cancel


Human vs. human game / Handicap
- Place a stone; because of the handicap, the stone must be white
- The computer does not respond with a move because a human vs. human game is
  in progress
- Place a stone; it must be a black stone
- Tap "computer play". The computer must generate one move for white
- There must be both audio and vibration feedback when the computer generates
  the move (iPad: no vibration feedback)
- Place a stone; it must be a black stone
- Place a few more stones and capture a stone group; the stone group must
  disappear when it is captured
- Tap "pass". The status line must display the message "white has passed"
- Disable the user preference Scoring > Find dead stones
- Tap "pass"
- The game ends and the score is displayed immediately


Computer vs. computer game
- Select "new game"
- On the "computer vs. computer" segment, assign "Fuego" to play
- When the game is started, the computer players immediately start generating
  moves
- At no time during a computer vs. computer game there must be any audio or
  vibration feedback when the computer generates moves
- The toolbar displays the following buttons
  - Pause
  - Interrupt
  - Game Info
  - Action
- The pause, interrupt and the game info button are enabled, the action button
  is disabled
- Tap pause
- The pause button is replaced by the continue button
- The current computer player finishes calculating its move
- During that time, the status line still displays "<player name> is thinking"
- Once the computer player has finished generating its move, the following
  happens
  - The interrupt button is replaced by the discard button
  - The action button becomes enabled
  - The next computer player does not start generating a move
- Tap game info; the game state is now displayed as "game is paused"; dismiss
  the game info view
- Tap continue
- The next computer player immediately starts to generate a move
- Tap interrupt
- The current computer player immediately plays its move, and the next
  computer player immediately starts to generate a move
- Tap pause, immediately followed by a tap on continue
- The game continues uninterrupted
- Tap pause
- Tap game actions as soon as it becomes available. The menu must not display
  "resign". Dismiss the menu.
- Tap discard
- The most recent move is discarded
- Discard all moves. When all moves have been discarded, the discard button must
  no longer be visible.
- Tap continue. The computer starts to generate moves.
- Lock the device, then unlock the device
- The game must now be paused
- Lock the device while the game is still paused, then unlock the device
- The game must still be paused


Board position
- Create a new computer vs. human game that uses a handicap
- Make a few moves until the computer actually requires some time to make its
  move. Whenever the computer player is thinking, any controls that allow to
  view board positions must be disabled or have no effect when tapped. This
  includes
  - Navigation buttons
  - Board position list
  - iPhone: Current board position view
- When the computer player has generated its move
  - Buttons that allow to view earlier board positions must be enabled
  - Buttons that allow to view later board positions must be disabled
- iPhone: Tap the current board position view several times. On each tap the
  toolbar switches between the board position navigation buttons and the board
  position list.
- Display the "Game Info" view. Dismiss the "Game Info" view after checking the
  following information on the "board" segment:
  - Board position and move info refer to the correct move
  - 0 (zero) moves follow after the current position
  - The footer text indicates that the board position after the most recent move
    is currently displayed.
- Go back one move. No progress HUD is displayed.
- Buttons that allow to view later board positions must now be enabled.
- The "pass" button must be disabled (because it is the computer player's turn)
- Display the "Game Info" view. Dismiss the "Game Info" view after checking the
  following information on the "board" segment:
  - Board position and move info refer to the correct move
  - 1 (one) move follows after the current position
  - The footer text indicates that a board position in the middle of the game is
    currently displayed.
- Try to make a move by panning. Nothing happens.
- Go back one move. No progress HUD is displayed.
- The "pass" button must be enabled
- Make a move by panning. An alert must be displayed that informs the user that
  all future moves will be discarded.
- Cancel the move. The move must not be played.
- Tap "computer play", "pass" and "discard". For each tap an alert must be
  displayed that informs the user that all future moves will be discarded. When
  the "discard" button is tapped, the wording is slightly different.
- Make a move by panning. This time when the alert is displayed confirm that
  you want to make the move. The following must happen:
  - The move must be played
  - The computer player must immediately respond with a move
  - When the computer player has generated its move, buttons that allow to view
    later board positions must be disabled, buttons that allow to view earlier
    board positions must be enabled.
- Turn off the "Discard future moves alert" in the user preferences
- Repeat the following steps for 1) making a move by panning, 2) tapping
  "computer play", and 3) tapping "pass":
  - Go back two moves
  - Take the action that makes the move
  - This time no alert is displayed, the move is just played and the same
    sequence of events occurs as before when the alert was displayed.
- Go back to the beginning of the game. Only the handicap stones are displayed.
  Buttons that allow to view earlier board positions must be disabled.
- Display the "Game Info" view. Dismiss the "Game Info" view after checking the
  following information on the "board" segment:
  - Board position refers to "start of game"
  - Move info is "n/a"
  - Correct number of moves that follow after the current position
  - The footer text indicates that the board position representing the beginning
    of the game is currently displayed
- Go forward one move. All navigation buttons must be enabled.
- Tap the "discard" button. All moves are discarded. The "discard" button is
  no longer visible. The "computer play" button is visible and enabled. The
  "pass" button is visible but disabled (because it is the computer player's
  turn).
- Tap the "computer play" button
- The "discard" button is visible and enabled
- Go back to the beginning of the game.
- Tap the "discard" button. All moves are discarded. The same buttons are
  visible and in the same enabled state as in the previous test where all moves
  were discarded.
- Generate more than 10 moves (to make this quicker, start a new game with
  "Fuego (weak)" as the computer player)
- On the board position list, select the board position that represents the
  beginning of the game (must be more than 10 board positions away from the end
  of the game)
- The progress HUD is displayed while the app updates the board to display
  the beginning of the game
- Suspend the application
- Kill the application
- Launch the application. The progress HUD is displayed without interruption.
  The HUD displays progress for each of the three phases:
  - Launch
  - Restore game
  - Restore board position
- After application launch is complete, the board displays the board position
  at the beginning of the game


Zooming/scrolling, coordinates and move number
- Switch to the Play view settings screen
- Enable "mark last move"
- Enable "display coordinates"
- Set the move numbers slider to its maximum value
- Set the maximum zoom to its maximum value
- From the Archive tab, load the ear-reddening game (use two human players)
- iPad
  - Coordinate labels are displayed
  - Move numbers are displayed for all stones
  - The last move number (325) is displayed in red
- iPhone
  - Neither coordinate nor move numbers are displayed
  - The last move is marked up with a symbol
- Double tap. The board is zoomed in.
- iPhone
  - Coordinate labels are now displayed
  - Move numbers are still not displayed
- Double tap. The board is zoomed in again.
- iPhone
  - Move numbers are now displayed for all stones (scroll around the board
    for verification)
  - The last move number (325) is displayed in red
- Scroll around. The coordinate labels stick to the left/upper edge of the
  screen, but scroll together with the horizontal/vertical scroll direction so
  that they are always centered on the grid lines they are labelling.
- From the Archive tab, load the "9x9_1" game (use two human players)
- When the game has finished loading, the board is still zoomed in to the same
  zoom scale as before
- Touch two fingers. The board is zoomed out.
- Pinch to zoom in. Zooming stops at a certain maximum.
- In the Play view settings, reduce the maximum zoom slider to half position.
- Back on the Play tab, the board has zoomed out to match the new maximum zoom
- Pinch to zoom out until the board is at its normal size
- iPhone: Both move numbers and display coordinates are shown because we are
  now on a 9x9 board.
- In the Play view settings, disable coordinate labels
- Back on the Play tab, coordinate labels are now hidden
- In the Play view settings, reduce the move numbers slider to half position
- Back on the Play tab, move numbers 41-80 are displayed, move numbers 1-40 are
  not displayed
- Go to board position 40
- Move numbers are displayed for all the stones (move numbers 1-40)
- Go to board position 41
- Move number 1 is no longer displayed


Players & profiles
- Start a new computer vs. human game with players "Anonymous" and "Fuego"
- Navigate to the players & profiles preferences screen
- Tap the edit button
- Only the "Fuego (weak)" player can be deleted
- All profiles except the "Default" profile can be deleted
- Start a new game while the players & profiles preferences screen remains in
  edit mode
- Return to the players & profiles preferences screen. Edit mode must now be
  disabled
- Tap edit
- Add a new profile
- The "create" button must be disabled until you enter at least 1 character for
  the profile name
- Create the profile using the name "foo"
- Add a new player
- The "create" button must be disabled until you enter at least 1 character for
  the player name
- Turn the "human player" switch off
- The profile cell must now be displayed with the "Default" profile being
  selected
- Tap the profile cell
- A modal selection screen must appear; the "foo" profile which has previously
  been created must appear in the selection screen
- Select a profile that is not the default profile
- Back on the player edit screen, the selected profile must now be updated
- Turn the "human player" switch on
- The profile cell must now be hidden
- Turn the "human player" switch off
- The profile cell must again be displayed with the "Default" profile being
  selected
- Select the "foo" profile
- Create the player using the name "bar"
- Delete the profile "foo"
- Edit the player "bar"
- The player must be configured with the "Default" profile
- Display the "new game" screen. On all segments where a computer player can be
  selected, select the player "bar".
- Tap "cancel"
- Delete the player "foo"
- Display the "new game" screen. On all segments where a computer player can be
  selected, the pre-selected player is shown as "no player selected" and greyed
  out. One of the remaining computer players "Fuego" and "Fuego (weak") can
  be selected.


Archive, document interaction
- On the archive tab, select an entry from the list of saved games
- The detail view displays the same information as the table view entry, plus
  a load button
- Tap the game name cell
- A modal edit screen must appear which allows to change the save game name
- Delete all characters; the "done" button must be disabled
- Tap cancel; the edit screen must disappear without a change taking place
- Again, tap the game name cell
- Change the game name and tap done
- The detail view must display the new name
- Navigate back to the main archive view; the new name must appear there as
  well
- Tap the edit button
- All saved games can be deleted
- Delete one of the games
- Tap done
- Using iTunes, upload an .sgf file to the device and download the .sgf files
  already in the archive from the device
- After each upload check that the archive view updates itself
  - Known bug: Self-updating currently does not work
- On the archive view, select one of the saved games
- Tap the "actions" button
- A menu opens that offers to export the .sgf file to the following desintations
  - Mail
  - Pasteboard
  - PandaTetsuki (if installed)
  - Drop Box (if installed)
- Select Mail, then proceed to send the email with the attached file to your
  own address
- Check your email inbox that you received the message
- Open the message, tap the attached .sgf file
- A menu opens that offers to export the .sgf file 1) to Little Go, and 2) to
  the same destinations (except the pasteboard) that were available when
  exporting from Little Go above
- Select Little Go
- Little Go launches and informs the user that the game was imported
- Import the same .sgf again
- The name of the imported game is adjusted so that it remains unique
- Make sure that the following types of saved games are present on the device
  (typically by importing them from DropBox, or via iTunes file sharing):
  - a game with handicap
  - a game with no komi
  - games with different board sizes
  - a game that contains both stone placement moves and pass moves
  - a large 19x19 game
  - a game where one of the players resigned
  - the game 9x9_1.sgf (for scoring later on)
- Load each of these games and check that the content of the saved game is
  correctly restored (handicap, komi, board size, pass and normal moves,
  resignation)
- Every time a game is loaded, a progress bar must indicate the load status;
  after the game is loaded the play view must be visible
- Use iTunes to upload a file that has the .sgf extension, but is not a game in
  .sgf format
- Attempt to load a game from this file. An error message must be displayed that
  the file may not be an .sgf file. A new game is started using the most recent
  "new game" settings.
- Load a game in the following situations
  - While the game is finished; a new game must be started and all appropriate
    toolbar buttons must be enabled after the game has finished loading
  - While the Game Info view is visible; the Game Info view must be dismissed
    after the game has finished loading
  - While scoring mode is enabled; scoring mode must be disabled after the game
    has finished loading
- After a game is loaded, the next new game must use the same player selection
  used for loading the game, but all other new game parameters (board size,
  komi, handicap) must remain unchanged from the values that were explicitly
  set by the user when a new game was started
- Make sure that the following saved games which contain errors are present on
  the device
  - illegal-move.sgf
  - move-by-wrong-player.sgf
- Try loading each of these games. An error message must be displayed each time,
  explaining that the save game contains an error. Dismissing the error message
  must still result in a new game being started.
- Load a game, then press the Home button in the middle of the loading process
- Launch the application. The loading process must continue.
- Load a game, then press the Home button in the middle of the loading process
- Kill the application
- Launch the application. The loading process is not continued. Instead, a new
  game is started with the most recent "new game" settings (the players are
  those from the most recent attempt to load a game)


Scoring
- Load game 9x9_1.sgf
- Check that the following scores are present on the game info view
    Black             White
      -      Komi       0
      6    Captured     9
     n/a     Dead      n/a
     n/a   Territory   n/a
      6      Score      9
        White wins by 3
- The footer on the "score" segment of the game info view indicates that some
  scores are not available because scoring mode is not enabled
- Turn off the user preference "find dead stones"
- Turn on scoring mode
- Check that the following scores are present on the game info view
    Black             White
      -      Komi       0
      6    Captured     9
      0      Dead       0
      2    Territory   12
      8      Score     21
       White wins by 13
- There is no footer message on the "score" segment of the game info view
- Tap white stone at E1
- The white stone group that includes E1 is marked as dead
- Two empty regions (one including G1, the other including G3) are marked as
  inconsistent territory
- In the user preferences, select different markup styles for inconsistent
  territory and check that the styles are correctly applied
- Turn on the user preference "mark dead stones intelligently"
- Tap white stone at J3
- In addition to the stone at J3, two additional white stone groups (one
  including G4, the other including G6) are also marked as dead
- The overall score is now "Black wins by 37"
- Tap white stone at E1
- The 4 white stone groups now marked as dead are all turned back to alive
  status
- Select board position for move 74 (white plays A9, captures 1 stone)
- The overall score is now "White wins by 17"
- Check that the following scores are present on the game info view
    Black             White
      -      Komi       0
      3    Captured     8
      0      Dead       0
      1    Territory   13
      4      Score     21
       White wins by 17
- The footer on the "score" segment of the game info view indicates that the
  score does not reflect the final score of the game
- Turn off scoring mode, then go to the board position at the beginning of the
  game
- The overall score in the game info view is now "Game is a tie"
- The footer on the "score" segment of the game info view indicates both 1) that
  the score does not reflect the final score of the game; and 2) that scoring
  mode is disabled


Suspending the app
- Load a game that has a few moves
- Press the Home button; the application is put into the background
- Reactivate the application; the same game state that was used when the app
  was last active is displayed again
- Change a few user preferences
- Press the Home button; the application is put into the background
- Kill the application
- Start the application
- On startup a game is loaded, restoring the same game state that was used when
  the app was last active
- Changed user preferences are also restored


Diagnostics
- GTP Features
  - TODO
- Crash report
  - TODO
- Send bug report
  - TODO
  - Special case: Play view screenshot after view was unloaded
    - This case can only be tested in the simulator
    - Load a game that has a few moves
    - Switch to Diagnostics tab
    - Generate a memory warning (in order to force unloading of the Play view)
    - Generate diagnostics information file
    - Check that the file contains a valid screenshot of the Play view
