Purpose of this document
------------------------
This document lists the steps needed to make a project release.


Before the release
------------------
- Create a release branch. All remaining work will be done in this branch.
  git checkout -b release-0.9.0 develop
- Run Xcode's analyze tool and fix all problems that are reported
- Make sure that the issues in the bugtracker are up to date
- Analyze any crash reports that are still outstanding
- If necessary, add an upgrade method to UserDefaultsUpdater
- Make sure that the bug report format version and/or the NSCoding version are
  updated if something relevant has changed since the last release. If the
  NSCoding version changes, the bug report format version MUST also be changed.
  Vice versa this is not always the case.
- If a new Xcode and/or iOS version were used to build the project, make sure
  that the Xcode and iOS base SDK versions are updated in the following files:
  - README.developer
  - NOTES.Build
- If 3rd party software has been updated
  - Make sure that the third party software version numbers in About.html are
    up to date
  - Make sure that all license files and the content of the NOTICE file are
    up to date
- Make sure that no debugging stuff has been forgotten in the code (e.g. search
  for "xxx")
- Update the ChangeLog
  - The main source for this are the issues on the bug tracker
  - The git commit log may also have useful information
  - Also add notes about changes to the user defaults, especially if some of
    the user's preferences are clobbered by UserDefaultsUpdater
- Replace the "Changes in this release" section of README.md with a collection
  of the most important changes from the ChangeLog.
- Update the "Troubleshooting" section in the MANUAL file if there are any new
  "known bugs"
- Make sure that the version number is up to date in the following files:
  - README.md
  - Info.plist (can be changed in Xcode's summary page for the main target)
- Increase CFBundleVersion in Info.plist (Xcode also makes this available on
  the summary page of the project, as the field labelled "Build")
- Make sure that the copyright year is up to date in the following files (e.g.
  2009-2011 instead of 2009-2010):
  - Info.plist
  - NOTICE
  - All source files that were touched since the last release. For instance,
    to list all files that were touched since the release 0.11.1 and were not
    updated to the current year 2013:
    git diff --name-only 0.11.1 | grep ^src | sort | uniq | xargs grep "// Copyright" 2>/dev/null | grep -v 2013 | cut -d":" -f1
- Remove the build directory to make sure that subsequent test and distribution
  builds are clean.
    rm -rf DerivedData
  As a side-effect, this also guarantees that the build date provided by
  VersionInfoUtilities is up to date. Last but not least, this is is also
  important after resources have changed, because Xcode has been known to leave
  old resource files in the build folder, which could lead to unexpected
  results.
- In Xcode select the "Little Go AdHoc Distribution" scheme (because this uses
  the Release configuration), then make a build for the simulator and for all
  target devices. If there are any warnings, fix them.
- Using the same scheme, select Product > Archive to make an ad-hoc distribution
  build, then run that build through the tests described in the TESTING
  document.
- Commit final changes (check with "git status" that nothing was forgotten)
- Select the "Little Go AppStore Distribution" scheme, then Product > Archive.
  Follow the instructions in the "Make an AppStore distribution" section below
  to upload the resulting build to iTunes Connect.


Create an archive
-----------------
- In the toolbar's scheme selector, activate one of the two schemes
    Little Go AdHoc Distribution
      or
    Little Go AppStore Distribution
  Which one depends on what you want to do with the archive.
- In both cases, select the "iOS Device" destination
- From the menu, select Product > Archive
- The application is now built using either the "Distribute_AdHoc" or the
  "Distribute_AppStore" build configuration
- After the build succeeds it is archived, then the "Organizer" window opens to
  display the archive that was just created
- Give it a useful name, e.g. "Little Go AdHoc Distribution 0.8.0"


Make an ad-hoc distribution (beta release)
------------------------------------------
- In Xcode in the Organizer window, select the archived build, then click the
  "Distribute..." button, followed by "Save for Enterprise or Ad-Hoc Deployment"
  on the next screen
- Select a code-signing identity (the default should be OK)
- Click the "Next" button which will pop up a save dialog
- Click the checkbox "Save for Enterprise Distribution"; this opens a pane that
  lets you fill in a few things about how you intend to distribute the build
- Most important is that what you enter in the "Application URL" field matches
  exactly the URL of the .ipa file as it is going to be available for download
- Sensible values are
  - Application URL = http://www.herzbube.ch/software/littlego/0.7/littlego-0.7.ipa
  - Title = Little Go 0.7 Beta Test
- You must also specify a save location and a name. This step creates both a
  .plist and an .ipa file, where the specified name serves as the base name for
  both files. Make sure to specify the same name as in the URL above (but
  without the .ipa extension; e.g. "littlego-0.7").
- Make sure to get the "Ad Hoc Distribution Provisioning Profile" from the
  iOS Provisioning Portal. This profile is stored in a .mobileprovision file.
- Upload the .plist, .ipa and .mobileprovision files to the server from where
  testers can download it
- Create an index.html at the download location that provides the necessary
  download links


Make an AppStore distribution (production release)
--------------------------------------------------
- Log in to iTunes Connect
- Add the new application version under "Manage apps"
- When everything is ready, click "Ready to Upload Binary"
- Step through the wizard and answer a few questions. After the wizard is
  finished and you return to the app's version information screen, the app
  status should now be "Waiting for Upload".
- In Xcode in the Organizer window, select the archived build, then click the
  "Distribute..." button, followed by "Submit to the iOS App Store" on the next
  screen
- Provide the login credentials
- Select a code-signing identity (the default should be OK)
- The archive is now validated and uploaded
- After the upload has finished, the app's status in iTunes Connect should now
  have changed to "Upload Received" 
- Wait for Apple to review the submission


Make the release
----------------
- After Apple has completed the review process, the release can now be viewed
  as official and the remaining steps can be performed
- Merge all changes in the release branch into develop
  git checkout develop
  git merge release-0.9.0
- Merge all changes in the release branch into master
  git checkout master
  git merge develop
- Tag and sign the release
  git tag -s -m "tagging release x.y" x.y <commit hash>
- Update the GitHub repository
  git push
  git push --tags
- Remove the release branch, both locally and, if it was pushed, on GitHub
- Write a release note blog post on the website
- Close tickets that are not yet closed in the issue tracker, then close the
  milestone
- Create a new release on GitHub that references the git tag. Copy ChangeLog
  content into the release description.
- Change the QuincyKit status of the new version to "Available" and the status
  of the old version to "Discontinued"
- Cleanup the Trello board
- Update littlego.herzbube.ch
- Release the new version to the App Store
