Purpose of this document
------------------------
This document lists the steps needed to make a project release.


Before the release
------------------
- If necessary, update the TODO file
- If necessary, add an upgrade method to UserDefaultsUpdater
- Make sure that no debugging stuff has been forgotten in the code (e.g. search
  for "xxx")
- Update the ChangeLog
  - The main source for this is the git commit log
  - Also add notes about changes to the user defaults, especially if some of
    the user's preferences are clobbered by UserDefaultsUpdater
- Replace the "Changes in this release" section of the README with a collection
  of the most important changes from the ChangeLog.
- Update the "Troubleshooting" section in the MANUAL file if there are any new
  "known bugs"
- Change the release date in the following files:
  - Roadmap
- Make sure that the version number is up to date in the following files:
  - README
  - Info.plist (can be changed in Xcode's summary page for the main target)
- Increase CFBundleVersion in Info.plist (Xcode also makes this available on
  the summary page of the project, as the field labelled "Build")
- Make sure that the copyright year is up to date in the following files (e.g.
  2009-2011 instead of 2009-2010):
  - All source files that were touched since the last release
  - Info.plist
- In Xcode select the "Little Go Release" scheme, then make a build for the
  simulator and for all target devices. If there are any warnings, fix them.
- Using the same scheme, select Product > Archive to make a distribution build,
  then run that build through the tests described in the TESTING document
- Commit final changes (check with "git status" that nothing was forgotten)


Create an archive
-----------------
- In the toolbar's scheme selector, activate one of the two schemes
    Little Go AdHoc Distribution
      or
    Little Go AppStore Distribution
  Which one depends on what you want to do with the archive.
- In both cases, select the "iOS Device" destination
- From the menu, select Product > Archive
- The application is now built using either the "Distribute_AdHoc" or the
  "Distribute_AppStore" build configuration
- After the build succeeds it is archived, then the "Organizer" window opens to
  display the archive that was just created
- Give it a useful name, e.g. "Little Go AdHoc Distribution 0.8.0"


Make an ad-hoc distribution (beta release)
------------------------------------------
- In Xcode in the Organizer window, select the archived build, then click the
  "Share..." button
- From the list of content options, select "iOS App Store Package (.ipa)"
- Select a code-signing identity (the default should be OK)
- Click the "Next" button which will pop up a save dialog
- Click the checkbox "Save for Enterprise Distribution"; this opens a pane that
  lets you fill in a few things about how you intend to distribute the build
- Most important is that what you enter in the "Application URL" field matches
  exactly the URL of the .ipa file as it is going to be available for download
- Sensible values are
  - Application URL = http://www.herzbube.ch/software/littlego/0.7/littlego-0.7.ipa
  - Title = Little Go 0.7 Beta Test
- You must also specify a save location and a name. This step creates both a
  .plist and an .ipa file, where the specified name serves as the base name for
  both files. Make sure to specify the same name as in the URL above (but
  without the .ipa extension; e.g. "littlego-0.7").
- Make sure to get the "Ad Hoc Distribution Provisioning Profile" from the
  iOS Provisioning Portal. This profile is stored in a .mobileprovision file.
- Upload the .plist, .ipa and .mobileprovision files to the server from where
  testers can download it
- Create an index.html at the download location that provides the necessary
  download links


Make an AppStore distribution (production release)
--------------------------------------------------
- Log in to iTunes Connect
- Add the new application version under "Manage apps"
- When everything is ready, click "Ready to Upload Binary"
- Step through the wizard and answer a few questions. After the wizard is
  finished and you return to the app's version information screen, the app
  status should now be "Waiting for Upload".
- In Xcode in the Organizer window, select the archived build, then click the
  "Validate..." button
- Select a code-signing identity (the default should be OK)
- Wait a few moments for the validation result
- If validation was successful, select "Submit..." in the Organizer window
- The archive is now uploaded
- After the upload has finished, the app's status in iTunes Connect should now
  have changed to "Upload Received" 
- Wait for Apple to accept the submission and publish the new version in their
  App Store


Make the source code distribution
---------------------------------
- Once the release is official, tag and sign it in Git
  cd <projectdir>
  git tag -s -m "tagging release x.y" x.y <commit hash>
- Update the blessed repository
  cd <projectdir>
  git push
  git push --tags
- Make the tar ball
  cd <projectdir>
  ./script/makedist.sh 0.7
- Make the source distribution available on the project website
  - Create a new directory in the public web space
  - Copy ChangeLog, README and tar ball (.tar.gz) into the new directory
  - Double-check that third party source code tar balls are also available for
    download
  - Update the "download latest" link on http://www.herzbube.ch/software
- Add the new version number to the bug tracker so that issues can be reported
- Update the project website to announce the new release


After the release
-----------------
- Cleanup
  rm -rf ~/Library/Developer/Xcode/DerivedData/Little_Go-*
- Bump the version number to the next planned release; check above under
  "Before the release" which files are affected
