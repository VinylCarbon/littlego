Purpose of this document
------------------------
This document contains a list of minor features and technical stuff that should
be implemented when time permits it. The TODO list is updated frequently as new
ideas crop up during programming.

For a broader view of how the project will develop over time, you should see
the Roadmap document.


Priority 1 (important)
----------------------
- Testing
  - Test application shutdown to see whether there are no memory leaks
  - Add more unit tests
    - GoPlayer
    - GoMove, GoPoint, GoBoardRegion; the main problem here is that certain
      methods in these classes have large side-effects, while other methods
      are utterly trivial
      -> extract logic and make all methods trivial
    - GoGame; the main problem here is that GoGame relies on GTP responses
      -> we need to substitute GTP client and engine with mock objects
- Give back to Fuego
  - information about how to build for iPhone
  - fix for the configure problem
  - improvements to the Autoconf/Automake configuration, i.e. optional creation
    of a unified library and optional installation of headers
  - Building against a release build of Fuego requires that the project needs
    to set the NDEBUG preprocessor macro, even if the project wants to make
    a debug build; this effectively prevents the use of assert()
- Implement a gesture recognizer that reacts immediately to the first touch
  (UITapGestureRecognizer only recognizes the gesture when the finger leaves
  the screen)
- Define protocols for ModelObserver and Model; move some methods from GoGame
  to Model; let GoGame adopt the Model protocol, and the various views and
  controllers adopt ModelObserver. This makes the different roles a little bit
  more explicit
- Find out more about GTP engine settings. Using the knowledge gained,
  reconsider whether it still makes sense that GTP engine settings are applied
  only at the beginning of the game.
  - Is it correct that "pondering" means that the engine is doing calculations
    while the human player takes his time for his turn, thus increasing its
    playing strength because it had more time for its calculations?
  - What does "reuse subtree" mean anyway?
  - Is actual memory consumption lowered on the spot when "max. memory" is set
    to a lower value? (would be useful to handle low-memory warnings)
  - When pondering is disabled and then re-enabled, does Fuego continue with its
    calculations where it left off? (would be useful to handle interruptions
    such as phone calls)
  - Does lowering the thread count degrade playing strength in any way (except
    of course that with matching hardware Fuego may be able to calculate more
    in less time)?
- Handle .sgf files with a "resigned" comment at the end. Fuego in such a case
  refuses an "undo" command.
- LoadGameCommand is too slow - when a game with many moves on a large board is
  restored, the command takes many seconds to execute. The probable culprit is
  GoBoardRegion::splitRegionIfRequired().
- Fuego responds to "savesgf" by saving all moves, even those that have been
  taken back with "undo"; this is probably intended behaviour on the side of
  Fuego's developers, but end users will certainly be surprised to see a move
  they believe they have taken back, miraculously reappear when they load a
  game. This behaviour should probably be announced somewhere in the README.
  Arguing the behaviour's usefulness might be more successful if we had a
  "redo" feature, which would let us explain the issue by redefining undo/redo
  as move backward/forward in the game's move history.
- Decide how the final implementation of the "intelligent" toggling feature in
  GoScore should look like
  - The original implementation toggled stones of the opposing color, which was
    not such a good idea - it had too much effect on the board and made the
    feature basically unusable.
  - Currently the code that toggles stones of the opposing color is disabled;
    it should be either removed entirely, or reactivated in a useful way
  - One possible idea: Only turn stones from alive to dead, but not vice versa
  - However the final solution looks like, update the GoScore class docs and
    possibly other doc snippets in GoScore.m
- Fix the following build warnings
  - [BWARN]warning: iPhone apps with a deployment target lower than 4.3 should
    include an armv6 architecture (current IPHONEOS_DEPLOYMENT_TARGET = "4.2",
    ARCHS = "armv7").
  - ld: warning: direct access in __ZN5boost6system12system_errorD1Ev to global
    weak symbol __ZTVN5boost6system12system_errorE means the weak symbol cannot
    be overridden at runtime. This was likely caused by different translation
    units being compiled with different visibility settings.


Priority 2 (nice to have)
-------------------------
- Transition to Xcode 4, mainly to get native git support
- In PlayerSelectionController and SettingsViewController: Add human/computer
  symbol to the table view cell depending on the type of the player that the
  cell represents
- Add a note to the "Edit player" view that explains why a player cannot be
  deleted, and some of his attributes cannot be changed, while he is
  participating in the current game
- While panning
  - If the location is invalid, display the reason in the status line
  - If placing a stone would capture other stones, mark up those stones
    and display in the status line how many stones would be captured
  - If placing a stone would set a group (your own or an enemy group) to
    atari, mark up that group
- Go objects should not rely on a globally unique GoGame instance (the shared
  game instance). The following major drawbacks result from this reliance:
  - The shared game instance is nothing but a glorified global variable. It
    introduces a hidden dependency between the implementation of GoGame (the
    initializer which sets the global variable), the other Go classes (which
    access the global variable), and ApplicationDelegate (which must take care
    to deallocate GoGame before creating a new instance)
  - Testability is sub-optimal. With the current implementation, test cases have
    to care about tearing down a GoGame instance before they can set up the
    next instance (similar to ApplicationDelegate)
- Add more preferences to tune Fuego (e.g. time limit for moves)
- Add a "swap players" option to the "new game" view
- When a new game is started, the request to confirm if the old game can be
  discarded should not appear based on the GoGameState; instead it should
  appear based on some sort of "document dirty" flag - if a game has been
  saved to .sgf it is marked as "not dirty".
- Add handler for .sgf files so that other apps can pass those files to the
  app for processing
- Future improvements to the 3rdparty build process (see separate section
  further down)
- Find a suitable trigger that allows TableViewGridCell to start querying its
  delegate; currently the UITableViewDataSource must manually initiate the
  querying process from within tableView:cellForRowAtIndexPath:().
- Find out the rules about running out of stones. There currently is
  GoGameHasEndedReasonNoStonesLeft in Constants.h which might need to be fixed.
- Add handling for counting eyes in sekis during territory scoring. See
  http://senseis.xmp.net/?TerritoryAndAreaScoring for details.
- Add area scoring. See http://senseis.xmp.net/?Scoring and
  http://senseis.xmp.net/?TerritoryAndAreaScoring for details. Make a user
  default for the choice of which method of scoring should be used by default.
  The reason: the user will likely be used to one or the other method, which
  will influence his or her play (under territory scoring it costs a point to
  play into one's own area, whereas under area scoring it costs a point not to
  play on a neutral point).
- Add generalized tableView:heightForRowAtIndexPath:() implementations to
  TableViewCellFactory for a few cell types, analogous to a similar method
  in TableViewSliderCell. This would be useful for calculations of variable
  text label heights in case a text label displays a longish string.
- Dynamically generate a navigation controller structure that displays documents
  such as README or MANUAL.
- Add UITextView support to EditTextController. Clients should be able to choose
  whether to display a UITextView (for long texts) or a UITextField (for short
  texts). EditGtpEngineProfileController currently has a private implementation
  of a UITextView based input view that can serve as an example.


Priority 3 (not important)
-------------------------
- There is a nice HOWTO written by Apple that shows how to create Xcode
  documentation sets with Doxygen. Might be worthwile to check this out:
  http://developer.apple.com/tools/creatingdocsetswithdoxygen.html
- In the iOS Simulator, using the mouse to pan outside the board sometimes
  triggers a PlayMove. This seems to happen only when the left or right edges
  are passed, and only in the simulator environment. In my opinion this is a bug
  in the simulator and/or UIPanGestureRecognizer: The gesture recognizer sends
  a message for state UIGestureRecognizerStateEnded while its locationInView:()
  method still returns a valid, on-board position. I set this problem to a low
  priority because the erroneous behaviour cannot be observed on the iPhone
  device.
- In a computer vs. computer game, consider automatically pausing the game if
  the user leaves the "Play" tab.
- Update the Archive View if the user changes his locale in the system
  preferences (the view displays formatted dates)
- Add support for folders to the Archive view
- Consider adding undo support through shaking the device (see HIG for a
  description of how this is supposed to work)
- Find a way to add the opening book to the project resources without
  depending on a fixed path (a fixed path will break if the project is
  compiled on a newer base SDK)
- Automatic scrolling to the bottom of the GTP Log view does not always work
  - It never works in the raw log
  - It does not work in the table view in the following scenario: Suspend
    application > Resume application > The "savesgf" command from the suspend
    background task is not visible > Manually scroll down to make the command
    visible > Generate another command > Auto-scroll does not work!
- In SubmitGtpCommandView.xib
  - Use a larger font to display the command
  - Use a UITextView to edit the command (or make the UITextField multi-line)
  - Try to replace UIPickerView by something else; UITableView would be more
    suitable, but so far I was unable to come up with a UITableView solution
    that looks good
- Play a "whoosh" sound when the user submits a GTP command
- Allow free selection of komi values. The value of this is disputable, but an
  implementation is presumably rather simple since komi is treated as a
  numeric value everywhere
- Allow handicap values greater than 9
  - Fixing HandicapSelectionController is probably quite simple: Using a
    TableViewSliderCell should do the trick. A clever idea is still needed how
    the notice about the non-existing handicap 1 should be displayed.
  - The bigger problem is that we would need to implement knowledge about
    handicap stone placement because we can't use the GTP command
    "fixed_handicap" (defined in the GTP specs) for handicap values > 9.

Future improvements to the 3rdparty build process
-------------------------------------------------
- Build both a debug and a release version of 3rdparty libraries; use the build
  variable $(CONFIGURATION) to set LIBRARY_SEARCH_PATHS. This is important
  so that Little Go no longer needs to set the preprocessor macro NDEBUG in
  a debug build (with NDEBUG set, assert() does not work; possibly there are
  other effects as well)
- Research wether the build variable $(EFFECTIVE_PLATFORM_NAME) exists and what
  values it may take, especially if there are different values for iPhoneOS and
  iPhoneSimulator builds (suspected values are iphoneos and iphonesimulator).
  A list of all official build variables is this:
  http://developer.apple.com/library/mac/#documentation/DeveloperTools/Reference/XcodeBuildSettingRef/1-Build_Setting_Reference/build_setting_ref.html
- Check out the following article to see whether it would make sense to add
  more visible references to external libraries to the Xcode project:
  http://wiki.remobjects.com/wiki/Linking_Custom_Static_Libraries_from_your_iPhone_Xcode_Projects
- Fix build scripts so that configure-based projects can store multiple
  platform builds, so that distclean before a build becomes an option instead
  of a requirement (Boost already supports this)
- Check to see if it makes sense (and is feasible) to create a single universal
  library for Boost in the same way as it is done for Fuego
- Check to see if there is a better way to create the single universal library
  for Fuego than the current clunky way. Possible requires libtool support.
- Check to see whether the compiler options -mmacosx-version-min and
  -miphoneos-version-min may replace usage of the environment variables
  MACOSX_DEPLOYMENT_TARGET and IPHONEOS_DEPLOYMENT_TARGET (note: from studying
  an Xcode compilation command it appears that the iPhoneSimulator platform
  uses -mmacosx-version-min, or MACOSX_DEPLOYMENT_TARGET)
- bjam clean does not work
- Fix the following issue: IPHONE_SIMULATOR_BASESDK_VERSION at the moment (with
  Xcode 3.2.5) cannot be 4.2, must be 4.1, because with 4.2 there are problems
  with symbols in 3rdparty libraries. The symptom is that the application
  crashes with the following output in the debug console:
    Detected an attempt to call a symbol in system libraries that is not present on the iPhone:
    pthread_cond_wait$UNIX2003 called from function _ZN5boost18condition_variable4waitERNS_11unique_lockINS_5mutexEEE in image Little Go.
    If you are encountering this problem running a simulator binary within gdb, make sure you 'set start-with-shell off' first.
- Find a way in Xcode how to specify different base SDKs for the iPhone (Device)
  and the iPhoneSimulator builds. Without this, 1) it's impossible to reference
  such builds of 3rdparty libs in an elegant way; and 2) linking a 4.2 simulator
  Xcode build against a 4.1 simulator 3rdparty build is a mismatch that is
  asking for trouble. If a solution is found, remove the hack in function
  INSTALL_STEPS_SOFTWARE() in build-fuego.sh which creates an SDK directory
  symlink as a workaround for this Xcode limitation.
- Add support for devices that are not capable of multitasking: The application
  delegat needs to be enhanced with an applicationWillTerminate:() handler, and
  BackupGameCommand needs to be fixed so that it does not use a background task
  to write its temporary file.
