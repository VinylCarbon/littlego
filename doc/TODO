Purpose of this document
------------------------
This document contains a list of minor features and technical stuff that should
be implemented when time permits it. The TODO list is updated frequently as new
ideas crop up during programming.

For a broader view of how the project will develop over time, you should see
the Roadmap document.


Priority 1 (important)
----------------------
- Add global exception handler that "gracefully" shuts down the application
- Handle .sgf files with a "resigned" comment at the end. Fuego in such a case
  refuses an "undo" command.
- Fuego responds to "savesgf" by saving all moves, even those that have been
  taken back with "undo"; this is probably intended behaviour on the side of
  Fuego's developers, but end users will certainly be surprised to see a move
  they believe they have taken back, miraculously reappear when they load a
  game. This behaviour should probably be announced somewhere in the README.
  Arguing the behaviour's usefulness might be more successful if we had a
  "redo" feature, which would let us explain the issue by redefining undo/redo
  as move backward/forward in the game's move history.
- Fix the following issues
  - https://bugs.herzbube.ch/show_bug.cgi?id=131 (linker warning)
- Once the "interrupt" feature has been implemented, do not disable the
  "load game" button in ViewGameController if a computer player is currently
  thinking
  - Also update the help if this is implemented
  - We probably also need to do something about the case where a human player
    has triggered the "play for me" function. In a human vs. human game, there
    is only one pending computer move, but in a human vs. computer game there
    TWO pending computer moves - but there is no "pause" function that can be
    used to prevent the second computer move after the interrupt has been sent.
- Add a permanent secondary thread that can be used for the safe execution of
  asynchronous commands. This should then be used to clean up some of the
  clunky "thread juggling" that takes place in various places (application
  startup, possibly LoadGameCommand and BackupGameCommand)
- Allow to store and retrieve "New game" settings; this makes the process of
  starting a new game much quicker if one frequently starts new games with
  different settings
- "New game" is not visible enough, and/or people are confused because they
  don't know where they can change the board size. One possible solution for
  this could be to display the "New game" (or "Load game", see TODO entry under
  priority 2) screen on app startup instead of automatically starting a new
  game. This should be made into a user preference.


Priority 2 (nice to have)
-------------------------
- In PlayerSelectionController and SettingsViewController: Add human/computer
  symbol to the table view cell depending on the type of the player that the
  cell represents
- While panning
  - If the location is invalid, display the reason in the status line
  - If placing a stone would capture other stones, mark up those stones
    and display in the status line how many stones would be captured
  - If placing a stone would set a group (your own or an enemy group) to
    atari, mark up that group
- Add more preferences to tune Fuego
  - uct_param_player max_ponder_time xxx (has influence on how much memory can
    be used, mention this in the MANUAL)
  - Also nice would be a maximum time limit for its moves (without implementing
    the whole system for time-based play). If Fuego does not have such a
    feature, it can be implemented in Little Go by sending an "interrupt" after
    a timer has elapsed.
- Add a "swap players" option to the "new game" view
- When a new game is started, the request to confirm if the old game can be
  discarded should not appear based on the GoGameState; instead it should
  appear based on some sort of "document dirty" flag - if a game has been
  saved to .sgf it is marked as "not dirty".
- Add handler for .sgf files so that other apps can pass those files to the
  app for processing
- Future improvements to the 3rdparty build process (see separate section
  further down)
- Find a suitable trigger that allows TableViewGridCell to start querying its
  delegate; currently the UITableViewDataSource must manually initiate the
  querying process from within tableView:cellForRowAtIndexPath:().
- Find out the rules about running out of stones. There currently is
  GoGameHasEndedReasonNoStonesLeft in Constants.h which might need to be fixed.
- Add handling for counting eyes in sekis during territory scoring. See
  http://senseis.xmp.net/?TerritoryAndAreaScoring for details.
- Add area scoring. See http://senseis.xmp.net/?Scoring and
  http://senseis.xmp.net/?TerritoryAndAreaScoring for details. Make a user
  default for the choice of which method of scoring should be used by default.
  The reason: the user will likely be used to one or the other method, which
  will influence his or her play (under territory scoring it costs a point to
  play into one's own area, whereas under area scoring it costs a point not to
  play on a neutral point).
- Add generalized tableView:heightForRowAtIndexPath:() implementations to
  TableViewCellFactory for a few cell types, analogous to a similar method
  in TableViewSliderCell. This would be useful for calculations of variable
  text label heights in case a text label displays a longish string.
- Add UITextView support to EditTextController. Clients should be able to choose
  whether to display a UITextView (for long texts) or a UITextField (for short
  texts). EditGtpEngineProfileController currently has a private implementation
  of a UITextView based input view that can serve as an example.
- Display a message in the status line when the previous player has passed
  (currently works only for the computer player)
- On startup try to find out if the app was killed because it used too much
  memory. If this is the case, make sure that the app is not immediately killed
  again because of the same problem. E.g. check which profile was active when
  the app was killed, then temporarily lower max. memory. Don't forget to notify
  the user.
  - We can't use memory warnings for this because we don't get a recovery
    message when memory conditions normalize
- Instead of displaying a warning about which profile is used in the "New game"
  view for computer vs. computer games, or human vs. human games,  it's
  probably better to always display the profile name that is used - simpler and
  more consistent. Also investigage if displaying the profile name would be an
  improvement.
- Add territory statistics from Fuego to gauge who owns an area
  - Could also be used for scoring since it provides a percentage value for
    each point
  - If percentage is above a threshold, the point belongs to the color
  - Statistic numbers are available from the most recent search in the tree;
    they reflect the result of the search
  - Statistics gathering requires only minimal memory
- Suggestions by Martin
  - Show number of playouts per second (what's this exactly?)
  - Use some gfx commands
- Add user preference for what should happen when a memory warning is received
  - Remain silent (the default)
  - Display alert
  - Take away memory from Fuego
- Add user preference for what should happen if a backup game is found on
  startup
  - Load the game
  - Display alert with an option that lets the user decline to load the game
  - Silently ignore the backup (equivalent to "do not backup")
- Find a way how to get notified in iOS 5 when the user manipulates files via
  iTunes file sharing. Prior to iOS 5 the applicationDidBecomeActive:() method
  in the app delegate did the trick, but this no longer works. Also see
  http://stackoverflow.com/questions/6139369/is-there-a-way-to-get-notified-when-the-user-drags-a-file-into-itunes-file-shari
  If something can be found, remove the corresponding entry in the
  Troubleshooting section of the MANUAL
- Apply GTP engine profile settings immediately instead of only at the beginning
  of a new game. Refer to [1] for details on how the various settings interact.
  [1] https://sourceforge.net/apps/trac/fuego/wiki/FAQ3
- GoGame::setState() should check for correctness of the state machine. Also
  add more unit tests if this is implemented.
- Testing
  - Add mock objects for GTP client and engine to the frequently run unit test
    suite so that computer player behaviour can be simulated
  - Add a new suite of unit tests that is run only on demand (not on every build
    of the main target). These tests should contain tests for the real GTP
    client/engine. Notable test to be implemented: Check if GTP engine returns
    the same vertices for "fixed_handicap" as we implement in GoUtilities.
  - Add unit tests for GoUtilities, GoScore (load .sgf files with known scores)
    is pre-determined)
  - Test application shutdown to see whether there are no memory leaks
- Use color red instead of blue for cross-hair lines (and stone?) if the move is
  not legal
- Add a grayed out message to the Archive tab when there are no archived games,
  saying something like "You don't have any archived games."
- Define if it should be possible to load a game while scoring is in progress.
  Currently this works accidentally only. Also add a test case for this to the
  TESTING document.


Priority 3 (not important)
-------------------------
- There is a nice HOWTO written by Apple that shows how to create Xcode
  documentation sets with Doxygen. Might be worthwile to check this out:
  http://developer.apple.com/tools/creatingdocsetswithdoxygen.html
- In a computer vs. computer game, consider automatically pausing the game if
  the user leaves the "Play" tab.
- Update the Archive View if the user changes his locale in the system
  preferences (the view displays formatted dates)
- Add support for folders to the Archive view
- Consider adding undo support through shaking the device (see HIG for a
  description of how this is supposed to work)
- Find a way to add the opening book to the project resources without
  depending on a fixed path (a fixed path will break if the project is
  compiled on a newer base SDK)
- Automatic scrolling to the bottom of the GTP Log view does not always work
  - It never works in the raw log
  - It does not work in the table view in the following scenario: Suspend
    application > Resume application > The "savesgf" command from the suspend
    background task is not visible > Manually scroll down to make the command
    visible > Generate another command > Auto-scroll does not work!
- Play a "whoosh" sound when the user submits a GTP command
- Allow free selection of komi values. The value of this is disputable, but an
  implementation is presumably rather simple since komi is treated as a
  numeric value everywhere
- Allow handicap values greater than 9
  - Fixing HandicapSelectionController is probably quite simple: Using a
    TableViewSliderCell should do the trick. A clever idea is still needed how
    the notice about the non-existing handicap 1 should be displayed.
  - The bigger problem is that we would need to implement knowledge about
    handicap stone placement because we can't use the GTP command
    "fixed_handicap" (defined in the GTP specs) for handicap values > 9.
- Review design decision that GoPoint is retaining GoBoardRegion. There are
  a few unpleasant workarounds for cases when GoBoardRegion is deallocated too
  early due to GoPoint.region of the region's last point being set to nil, or
  to some other region. Originally these cases could be ignored because
  GoPoint.region was an atomic property, and the region received delayed
  deallocation due to autorelease, but ignorance is no longer possible now that
  all properties have been marked nonatomic and regions are deallocated
  immediately.
- When a profile is edited, display the players that use it. In the default
  profile add a note that this is used for human vs. human games.
- When a player is displayed, add a button below the profile that allows to
  directly jump to the profile detail view
- Add user preference whether the screen should be locked in a computer vs.
  computer game.
- Undoing a move in a human vs. computer game causes two updates in PlayView
  because two moves are taken back; there should only be one update
- When GameInfoView is visible and rotated, TableViewGridCell's drawRect:() is
  not invoked. The result is that the crisp 1-point lines that are normally
  drawn there appear slightly fuzzy because after UIKit's rotation animation
  the lines are anti-aliased. If some of the cells are not visible when the
  rotation begins, and become visible during rotation, they are then redrawn.
  The result is that half of the cells have crisp lines and half of them have
  fuzzy, anti-aliased lines.
- Add support for grid line widths that are even numbers. Currently an even
  number, especially for normal grid lines, leads to anti-aliasing because all
  the drawing calculations assume that a half-pixel needs to be added to
  drawing coordinates. This fix is really only needed if the drawing settings
  are exposed to the user to be changed at runtime.
- Find out why PlayViewMetrics (in drawLineLayer:withContext:horizontal:positionedAtPoint:())
  needs to translate vertical grid lines by one point (the "mystery point")
- Add GtpLogItem to objects being serialized when a bug report is sent. This has
  not been implemented yet because this potentially increases the diagnostics
  information file a lot (depending on the size of the GTP log)


Future improvements to the 3rdparty build process
-------------------------------------------------
- Build both a debug and a release version of 3rdparty libraries; use the build
  variable $(CONFIGURATION) to set LIBRARY_SEARCH_PATHS. This is important
  so that Little Go no longer needs to set the preprocessor macro NDEBUG in
  a debug build (with NDEBUG set, assert() does not work; possibly there are
  other effects as well)
- Research wether the build variable $(EFFECTIVE_PLATFORM_NAME) exists and what
  values it may take, especially if there are different values for iPhoneOS and
  iPhoneSimulator builds (suspected values are iphoneos and iphonesimulator).
  A list of all official build variables is this:
  http://developer.apple.com/library/mac/#documentation/DeveloperTools/Reference/XcodeBuildSettingRef/1-Build_Setting_Reference/build_setting_ref.html
- Check out the following article to see whether it would make sense to add
  more visible references to external libraries to the Xcode project:
  http://wiki.remobjects.com/wiki/Linking_Custom_Static_Libraries_from_your_iPhone_Xcode_Projects
- Fix build scripts so that configure-based projects can store multiple
  platform builds, so that distclean before a build becomes an option instead
  of a requirement (Boost already supports this)
- Check to see if it makes sense (and is feasible) to create a single universal
  library for Boost in the same way as it is done for Fuego
- Check to see if there is a better way to create the single universal library
  for Fuego than the current clunky way. Possible requires libtool support.
- Check to see whether the compiler options -mmacosx-version-min and
  -miphoneos-version-min may replace usage of the environment variables
  MACOSX_DEPLOYMENT_TARGET and IPHONEOS_DEPLOYMENT_TARGET (note: from studying
  an Xcode compilation command it appears that the iPhoneSimulator platform
  uses -mmacosx-version-min, or MACOSX_DEPLOYMENT_TARGET)
- bjam clean does not work
- Fix the following issue: IPHONE_SIMULATOR_BASESDK_VERSION at the moment (with
  Xcode 3.2.5) cannot be 4.2, must be 4.1, because with 4.2 there are problems
  with symbols in 3rdparty libraries. The symptom is that the application
  crashes with the following output in the debug console:
    Detected an attempt to call a symbol in system libraries that is not present on the iPhone:
    pthread_cond_wait$UNIX2003 called from function _ZN5boost18condition_variable4waitERNS_11unique_lockINS_5mutexEEE in image Little Go.
    If you are encountering this problem running a simulator binary within gdb, make sure you 'set start-with-shell off' first.
- Find a way in Xcode how to specify different base SDKs for the iPhone (Device)
  and the iPhoneSimulator builds. Without this, 1) it's impossible to reference
  such builds of 3rdparty libs in an elegant way; and 2) linking a 4.2 simulator
  Xcode build against a 4.1 simulator 3rdparty build is a mismatch that is
  asking for trouble. If a solution is found, remove the hack in function
  INSTALL_STEPS_SOFTWARE() in build-fuego.sh which creates an SDK directory
  symlink as a workaround for this Xcode limitation.
