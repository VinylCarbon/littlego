Purpose of this document
------------------------
This document contains a list of minor features and technical stuff that should
be implemented when time permits it. The TODO list is updated frequently as new
ideas crop up during programming.

For a broader view of how the project will develop over time, you should see
the Roadmap document.


Priority 1 (important)
----------------------
- Code cleanup
  - Remove @synchronized where possible and make properties non-atomic
  - Use class extensions instead of categories named "Private"
  - Review properties to see if any can be declared readonly in the public
    interface, then re-declared rewrite in the private class extension
- Add NSLog; possibly replace asserts; definitely where abort criteria are met
- Testing
  - Test application shutdown to see whether there are no memory leaks
  - Add unit tests (oh, the pain!)
- Find a way to add the opening book to the project resources without
  depending on a fixed path (a fixed path will break if the project is
  compiled on a newer base SDK)
- Fix build system
  - build-fuego.sh (or someone else) must create a symbolic link if the
    iPhoneSimulator base SDK version is different from the iPhoneOS base SDK
    version. This is *NOT* necessary if a way can be found how to specify these
    different base SDKs to Xcode. At the moment, it seems that both base SDKs
    always have the same value.

    ls -l ~/Documents/dev/littlego/3rdparty/install/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/
    drwxr-xr-x  6 patrick  staff  204  1 Mär 01:32 iPhoneSimulator4.1.sdk
    lrwxr-xr-x  1 patrick  staff   22  1 Mär 01:35 iPhoneSimulator4.2.sdk -> iPhoneSimulator4.1.sdk
- Document reviews before the release
  - INSTALL file
  - Create the NOTICE file
  - Add Copyright notice to the head of each source file
  - MANUAL file
  - README file
    - Under "License and source code" check whether the place to find the
      license in the running application is still correct
    - Under "Platforms" check the minimum requirements for iOS
  - README.developer file
  - ReleaseSteps file
- Contacts
  - Fuego team (on fuego-devel): Do they object to my using their source code?
    Answers to date: Only one developer spoke up, saying that he has no general
    objections as long as the spirit of the LGPL is in place.
- Give back to Fuego
  - information about how to build for iPhone
  - fix for the configure problem
  - improvements to the Autoconf/Automake configuration, i.e. optional creation
    of a unified library and optional installation of headers
  - Load opening book: Cannot be done via "book_load" GTP command because of
    spaces in the path. The default search paths are 1) executable path: can be
    used via hacking argv[0]; 2) ABS_TOP_SRCDIR/book: no good since we don't
    have the sources; 3) DATADIR/PACKAGE: no good since we don't know the
    folder in advance
  - Building against a release build of Fuego requires that the project needs
    to set the NDEBUG preprocessor macro, even if the project wants to make
    a debug build; this effectively prevents the use of assert()
- Set up Doxygen (see README.developer)
- Find out how to suspend the GTP engine's threads if the application moves to
  the inactive state (phone call); maybe kill the threads, then restart the
  engine and client at a later time? What about saving the .sgf file in such a
  scenario?
- If the GTP engine is running when the application goes to the background,
  check out if it's possible to let the engine finish processing in the
  background
- Implement a gesture recognizer that reacts immediately to the first touch
  (UITapGestureRecognizer only recognizes the gesture when the finger leaves
  the screen)
- Define protocols for ModelObserver and Model; move some methods from GoGame
  to Model; let GoGame adopt the Model protocol, and the various views and
  controllers adopt ModelObserver. This makes the different roles a little bit
  more explicit


Priority 2 (nice to have)
-------------------------
Future improvements to the 3rdparty build process:
- Build both a debug and a release version of 3rdparty libraries; use the build
  variable $(CONFIGURATION) to set LIBRARY_SEARCH_PATHS. This is important
  so that Little Go no longer needs to set the preprocessor macro NDEBUG in
  a debug build (with NDEBUG set, assert() does not work; possibly there are
  other effects as well)
- Research wether the build variable $(EFFECTIVE_PLATFORM_NAME) exists and what
  values it may take, especially if there are different values for iPhoneOS and
  iPhoneSimulator builds (suspected values are iphoneos and iphonesimulator).
  A list of all official build variables is this:
  http://developer.apple.com/library/mac/#documentation/DeveloperTools/Reference/XcodeBuildSettingRef/1-Build_Setting_Reference/build_setting_ref.html
- Check out the following article to see whether it would make sense to add
  more visible references to external libraries to the Xcode project:
  http://wiki.remobjects.com/wiki/Linking_Custom_Static_Libraries_from_your_iPhone_Xcode_Projects
- Fix build scripts so that configure-based projects can store multiple
  platform builds, so that distclean before a build becomes an option instead
  of a requirement (Boost already supports this)
- Check to see if it makes sense (and is feasible) to create a single universal
  library for Boost in the same way as it is done for Fuego
- Check to see if there is a better way to create the single universal library
  for Fuego than the current clunky way. Possible requires libtool support.
- Check to see whether the compiler options -mmacosx-version-min and
  -miphoneos-version-min may replace usage of the environment variables
  MACOSX_DEPLOYMENT_TARGET and IPHONEOS_DEPLOYMENT_TARGET (note: from studying
  an Xcode compilation command it appears that the iPhoneSimulator platform
  uses -mmacosx-version-min, or MACOSX_DEPLOYMENT_TARGET)
- bjam clean does not work
- Fix the following issue: IPHONE_SIMULATOR_BASESDK_VERSION at the moment (with
  Xcode 3.2.5) cannot be 4.2, must be 4.1, because with 4.2 there are problems
  with symbols in 3rdparty libraries. The symptom is that the application
  crashes with the following output in the debug console:
    Detected an attempt to call a symbol in system libraries that is not present on the iPhone:
    pthread_cond_wait$UNIX2003 called from function _ZN5boost18condition_variable4waitERNS_11unique_lockINS_5mutexEEE in image Little Go.
    If you are encountering this problem running a simulator binary within gdb, make sure you 'set start-with-shell off' first.
- Find a way in Xcode how to specify different base SDKs for the iPhone (Device)
  and the iPhoneSimulator builds. Without this, 1) it's impossible to reference
  such builds of 3rdparty libs in an elegant way; and 2) linking a 4.2 simulator
  Xcode build against a 4.1 simulator 3rdparty build is a mismatch that is
  asking for trouble


Priority 3 (not important)
-------------------------
No items yet
