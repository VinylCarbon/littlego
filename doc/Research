Purpose of this document
------------------------
This document describes the research I did before I started coding Little Go in
earnest.


Go Engines
----------
List of Go-playing programs: http://senseis.xmp.net/?GoPlayingPrograms

Aya
- http://www32.ocn.ne.jp/~yss/
- The program is labelled as "free software"
- The most recent version from 2008 is made available for download without
  source and for the Windows platform only
- Maybe the author could be persuaded to let me port the program to Mac OS X / iOS under a closed-source agreement

NeuroGo
- http://webdocs.cs.ualberta.ca/~emarkus/neurogo/
- No source code, not even a downloadable binary

Fuego
- http://fuego.sourceforge.net/
- A library/framework for programming Go games, including a Go engine
- Released under LGPL v3, which unfortunately includes the redistribution clause(s) from the GPL v3
- This looks so promising that I might write to the developers (fuego-devel) with an inquiry as to whether they think I could include the library

SmartGo
- http://www.smartgo.com/en/index.htm
- Commercial product
- Already offers the iPhone applications "SmartGo" and "SmartGo Pro"; both apps cost money

Steenvreter, Magog and Migos
- http://erikvanderwerf.tengen.nl/
- These programs apparently solve go problems, they are not go playing engines
- I'm not sure if the source code of these programs is available

Explorer
- http://webdocs.cs.ualberta.ca/~mmueller/cgo/explorer.html
- Program is freeware
- Googling for "Explorer.sit.hqx" leads to the following download location
  ftp://ftp.icsi.berkeley.edu/pub/theory/mmueller/Explorer.sit.hqx
- The archive expands to a binary and a "Read me" file that explains that this is shareware
- The source code effectively is not available

Indigo
- http://www.mi.parisdescartes.fr/~bouzy/INDIGO.html
- Linux binary that understands GTP

Dave Dyer's Go Program
- http://www.andromeda.com/people/ddyer/go-program.html
- Doesn't play

Pachi
- http://repo.or.cz/w/pachi.git
- Player program and framework
- Licensed under GPLv2

Moyoman
- http://www.moyoman.org/
- Player program written in Java
- Not very far developed, and also not actively developed anymore (last release is 2004)
- Licensed under the Apache License 2.0


Licensing
---------
GPL licensed software cannot be used for iOS applications under the current
terms of services of the iTunes Store and the App Store. Period. There are two
articles on fsf.org that describe a case where GNU Go was distributed over the
App Store. The second article explains where the GPL conflicts with Apple's
terms of services.
- http://www.fsf.org/news/2010-05-app-store-compliance/
- http://www.fsf.org/news/blogs/licensing/more-about-the-app-store-gpl-enforcement

Another interesting article explains that it's ok from a legal point of view to
distribute GPL'ed software via the App Store if you have the copyright on the
software (i.e. you wrote the software yourself)
- http://bonsansnom.wordpress.com/2011/01/08/about-apple-store-gpls-vlc-and-betrains/

An article written by someone who believes that it's ok to use GPL'ed software:
- http://www.geoffeg.org/wordpress/2009/10/07/the-iphone-and-the-gpl-v2-are-not-incompatible/

An older discussion on the subject. There are many opinions and no conclusions,
though.
- http://diveintomark.org/archives/2008/03/07/iphone-gpl
- One of the more interesting opinions is one that tries to refute the "spirit
  of the license" argument (where it is argued that it is difficult or expensive
  for an app user to customize an app with a modified version of the software)
- The reasoning is this: "So if I write a piece of code that only compiles if
  you use a $2000 compiler suite [...] then it is the code itself not the tools
  I am obligated to supply. If anyone can buy a $99 developer license that is
  just part of the tool chain cost."

The actual licenses:
- http://www.gnu.org/licenses/gpl-2.0.txt
- http://www.gnu.org/licenses/gpl-3.0.txt
- http://www.gnu.org/copyleft/lesser.html

Articles about the LGPL and iPhone apps:
- This one believes it's possible, although it's not in the spirit of the license
  http://huyzing.com/2009/08/24/compatibility-between-the-iphone-app-store-and-the-lgpl/
- This one believes it's not possible because of the $99/year cost
  http://loufranco.com/blog/files/lgpl-and-the-iphone.html

General research terms:
- gpl itunes
- lgpl itunes


Programming my own Go engine
----------------------------
Fuego is a so-called "Monte Carlo" engine, so that's what I am going to
research.
- A basic description what it's about: http://senseis.xmp.net/?MonteCarlo
- MCTS = Monte Carlo Tree Search
- "The principles of MCTS algorithms were published in the proceedings of the
  Computer and Games conference, which was held together with the Olympiad."
  (the ICGA Computer Olympiad, http://senseis.xmp.net/?ComputerOlympiad)
- UCT is a simple but effective form of MCTS, following link includes
  pseudo-code: http://senseis.xmp.net/?UCT
- RAVE seems to be another method of MCTS, but one that is a heuristic
  (refers to experience-based techniques for problem solving, learning, and
  discovery. Heuristic methods are used to speed up the process of finding a
  good enough solution, where an exhaustive search is impractical)
- MCTS publications: http://webdocs.cs.ualberta.ca/~mmueller/mcts.html
- Computer Go page: http://senseis.xmp.net/?ComputerGo


GTP - Go Text Protocol
----------------------
The reference is here: http://www.lysator.liu.se/~gunnar/gtp/

Apparently there are two versions of GTP:
- GTP version 1: Although superseded by GTP version 2, this protocol version
  may still have some relevance because it is implemented by the ubiquitous
  GNU Go. Version 3.0.0 of GNU Go actually has the reference implementation of
  GTP version 1, which at the same time serves as the protocol specification
  since there is no other good documentation.
- GTP version 2: The current protocol version. The specification still has
  "draft" status, but since there have been no changes since 2002, it's pretty
  safe to assume that version 2 of the protocol is stable. In theory, GNU Go
  3.4 has the reference implementation of GTP version 2. Whether this is true
  in practice has still to be verified.

A simple GTP session might consist of the following commands:

  protocol_version
  name
  version
  boardsize 9
  clear_board
  showboard
  quit

With Fuego, this looks like this:

  protocol_version
  = 2

  name
  = Fuego

  version
  = 1.0

  boardsize 9
  =

  clear_board
  =

  showboard
  =
    A B C D E F G H J
  9 . . . . . . . . . 9
  8 . . . . . . . . . 8
  7 . . + . . . + . . 7
  6 . . . . . . . . . 6
  5 . . . . . . . . . 5
  4 . . . . . . . . . 4
  3 . . + . . . + . . 3
  2 . . . . . . . . . 2
  1 . . . . . . . . . 1  B to play
    A B C D E F G H J

  quit
  =

Fuego installs two executables:
- fuego (FuegoMain application): This is the GTP interface to GoUctPlayer, a
  Monte-Carlo tree search Go player.
- fuego_test (FuegoTest application): GTP interface to a GTP engine with test
  commands. The --player argument tells the application to use a player with
  the specified behaviour.

Attaching to a GTP interface involves the following steps:
- Launch the desired executable in the background
- Attach to the process' input and output streams
- Write to the input stream to give commands to the GTP engine
- Read from the input stream to get the GTP engine's answers
- Unfortunately, on iOS it is not possible to spawn a process in the background
  as it used to be possible with NSTask on Mac OS X
- For this reason, it is not possible to include the Fuego executable with the
  application, launch the program in the background and attach to its standard
  input and output streams
- Instead, I assume that all this needs to be "simulated" by spawning a thread

