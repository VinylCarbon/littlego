Purpose of this document
------------------------
This document describes the research I did for this project, both at the start
and while coding.


Go Engines
----------
List of Go-playing programs: http://senseis.xmp.net/?GoPlayingPrograms

Aya
- http://www32.ocn.ne.jp/~yss/
- The program is labelled as "free software"
- The most recent version from 2008 is made available for download without
  source and for the Windows platform only
- Maybe the author could be persuaded to let me port the program to
  Mac OS X / iOS under a closed-source agreement?

NeuroGo
- http://webdocs.cs.ualberta.ca/~emarkus/neurogo/
- No source code, not even a downloadable binary

Fuego
- http://fuego.sourceforge.net/
- A library/framework for programming Go games, including a Go engine
- Released under LGPL v3, which unfortunately includes the redistribution
  clause(s) from the GPL v3
- This looks so promising that I might write to the developers (fuego-devel)
  with an inquiry as to whether they think I could include the library

SmartGo
- http://www.smartgo.com/en/index.htm
- Commercial product
- Already offers the iPhone applications "SmartGo" and "SmartGo Pro"; both apps
  cost money

Steenvreter, Magog and Migos
- http://erikvanderwerf.tengen.nl/
- These programs apparently solve go problems, they are not go playing engines
- I'm not sure if the source code of these programs is available

Explorer
- http://webdocs.cs.ualberta.ca/~mmueller/cgo/explorer.html
- Program is freeware
- Googling for "Explorer.sit.hqx" leads to the following download location
  ftp://ftp.icsi.berkeley.edu/pub/theory/mmueller/Explorer.sit.hqx
- The archive expands to a binary and a "Read me" file that explains that this
  is shareware
- The source code effectively is not available

Indigo
- http://www.mi.parisdescartes.fr/~bouzy/INDIGO.html
- Linux binary that understands GTP

Dave Dyer's Go Program
- http://www.andromeda.com/people/ddyer/go-program.html
- Doesn't play

Pachi
- http://repo.or.cz/w/pachi.git
- Player program and framework
- Licensed under GPLv2

Moyoman
- http://www.moyoman.org/
- Player program written in Java
- Not very far developed, and also not actively developed anymore (last release
  is 2004)
- Licensed under the Apache License 2.0


Licensing
---------
GPL licensed software cannot be used for iOS applications under the current
terms of services of the iTunes Store and the App Store. Period. There are two
articles on fsf.org that describe a case where GNU Go was distributed over the
App Store. The second article explains where the GPL conflicts with Apple's
terms of services.
- http://www.fsf.org/news/2010-05-app-store-compliance/
- http://www.fsf.org/news/blogs/licensing/more-about-the-app-store-gpl-enforcement

Another interesting article explains that it's ok from a legal point of view to
distribute GPL'ed software via the App Store if you have the copyright on the
software (i.e. you wrote the software yourself)
- http://bonsansnom.wordpress.com/2011/01/08/about-apple-store-gpls-vlc-and-betrains/

An article written by someone who believes that it's ok to use GPL'ed software:
- http://www.geoffeg.org/wordpress/2009/10/07/the-iphone-and-the-gpl-v2-are-not-incompatible/

An older discussion on the subject. There are many opinions and no conclusions,
though.
- http://diveintomark.org/archives/2008/03/07/iphone-gpl
- One of the more interesting opinions is one that tries to refute the "spirit
  of the license" argument (where it is argued that it is difficult or expensive
  for an app user to customize an app with a modified version of the software)
- The reasoning is this: "So if I write a piece of code that only compiles if
  you use a $2000 compiler suite [...] then it is the code itself not the tools
  I am obligated to supply. If anyone can buy a $99 developer license that is
  just part of the tool chain cost."

The actual licenses:
- http://www.gnu.org/licenses/gpl-2.0.txt
- http://www.gnu.org/licenses/gpl-3.0.txt
- http://www.gnu.org/copyleft/lesser.html

Articles about the LGPL and iPhone apps:
- This one believes it's possible, although it's not in the spirit of the
  license
  http://huyzing.com/2009/08/24/compatibility-between-the-iphone-app-store-and-the-lgpl/
- This one believes it's not possible because of the $99/year cost
  http://loufranco.com/blog/files/lgpl-and-the-iphone.html


Programming my own Go engine
----------------------------
Fuego is a so-called "Monte Carlo" engine, so that's what I am going to
research.
- A basic description what it's about: http://senseis.xmp.net/?MonteCarlo
- MCTS = Monte Carlo Tree Search
- "The principles of MCTS algorithms were published in the proceedings of the
  Computer and Games conference, which was held together with the Olympiad."
  (the ICGA Computer Olympiad, http://senseis.xmp.net/?ComputerOlympiad)
- UCT is a simple but effective form of MCTS, following link includes
  pseudo-code: http://senseis.xmp.net/?UCT
- RAVE seems to be another method of MCTS, but one that is a heuristic
  (refers to experience-based techniques for problem solving, learning, and
  discovery. Heuristic methods are used to speed up the process of finding a
  good enough solution, where an exhaustive search is impractical)
- MCTS publications: http://webdocs.cs.ualberta.ca/~mmueller/mcts.html
- Computer Go page: http://senseis.xmp.net/?ComputerGo

Research stopped for the moment because I haved decided to use Fuego.


GTP - Go Text Protocol
----------------------
The reference is here: http://www.lysator.liu.se/~gunnar/gtp/

Apparently there are two versions of GTP:
- GTP version 1: Although superseded by GTP version 2, this protocol version
  may still have some relevance because it is implemented by the ubiquitous
  GNU Go. Version 3.0.0 of GNU Go actually has the reference implementation of
  GTP version 1, which at the same time serves as the protocol specification
  since there is no other good documentation.
- GTP version 2: The current protocol version. The specification still has
  "draft" status, but since there have been no changes since 2002, it's pretty
  safe to assume that version 2 of the protocol is stable. In theory, GNU Go
  3.4 has the reference implementation of GTP version 2. Whether this is true
  in practice has still to be verified.

A simple GTP session might consist of the following commands:

  protocol_version
  name
  version
  boardsize 9
  clear_board
  showboard
  quit

With Fuego, this looks like this:

  protocol_version
  = 2

  name
  = Fuego

  version
  = 1.0

  boardsize 9
  =

  clear_board
  =

  showboard
  =
    A B C D E F G H J
  9 . . . . . . . . . 9
  8 . . . . . . . . . 8
  7 . . + . . . + . . 7
  6 . . . . . . . . . 6
  5 . . . . . . . . . 5
  4 . . . . . . . . . 4
  3 . . + . . . + . . 3
  2 . . . . . . . . . 2
  1 . . . . . . . . . 1  B to play
    A B C D E F G H J

  quit
  =

Fuego installs two executables:
- fuego (FuegoMain application): This is the GTP interface to GoUctPlayer, a
  Monte-Carlo tree search Go player.
- fuego_test (FuegoTest application): GTP interface to a GTP engine with test
  commands. The --player argument tells the application to use a player with
  the specified behaviour.

Attaching to a GTP interface involves the following steps:
- Launch the desired executable in the background
- Attach to the process' input and output streams
- Write to the input stream to give commands to the GTP engine
- Read from the input stream to get the GTP engine's answers
- Unfortunately, on iOS it is not possible to spawn a process in the background
  as it used to be possible with NSTask on Mac OS X
- For this reason, it is not possible to include the Fuego executable with the
  application, launch the program in the background and attach to its standard
  input and output streams
- Instead, I assume that all this needs to be "simulated" by spawning a thread


Fuego
-----
This section contains basic research about what services Fuego can provide.

A list of all GTP commands known by Fuego 1.0 (obtained with GTP command
"list_commands") follows. Those commands marked with an asterisk are described
in the GTP 2.0 specification.

all_move_values
autobook_additive_cover
autobook_close
autobook_counts
autobook_cover
autobook_expand
autobook_export
autobook_import
autobook_load_disabled_lines
autobook_mainline
autobook_merge
autobook_open
autobook_param
autobook_priority
autobook_refresh
autobook_save
autobook_scores
autobook_state_info
autobook_truncate_by_depth
boardsize (*)
book_add
book_clear
book_delete
book_info
book_load
book_moves
book_position
book_save
book_save_as
clear_board (*)
cputime
cputime_reset
echo
echo_err
final_score (*)
final_status_list (*)
fixed_handicap (*)
fuego-license
genmove (*)
get_komi
get_random_seed
gg-undo
go_board
go_clock
go_param
go_param_rules
go_param_timecontrol
go_player_board
go_point_info
go_point_numbers
go_rules
go_safe
go_safe_dame_static
go_safe_gfx
go_safe_winner
go_sentinel_file
go_set_info
gogui-analyze_commands
gogui-interrupt
gogui-play_sequence
gogui-setup
gogui-setup_player
is_legal
kgs-genmove_cleanup
kgs-time_settings
known_command (*)
komi (*)
list_commands (*)
list_stones
loadsgf (*)
name (*)
pid
place_free_handicap (*)
play (*)
protocol_version (*)
quiet
quit (*)
reg_genmove (*)
reg_genmove_toplay
savesgf
set_free_handicap (*)
set_random_seed
sg_compare_float
sg_compare_int
sg_debugger
sg_exec
sg_param
showboard (*)
time_lastmove
time_left (*)
time_settings (*)
uct_bounds
uct_default_policy
uct_estimator_stat
uct_gfx
uct_max_memory
uct_moves
uct_param_globalsearch
uct_param_player
uct_param_policy
uct_param_rootfilter
uct_param_search
uct_patterns
uct_policy_moves
uct_prior_knowledge
uct_rave_values
uct_root_filter
uct_savegames
uct_savetree
uct_score
uct_sequence
uct_stat_player
uct_stat_player_clear
uct_stat_policy
uct_stat_policy_clear
uct_stat_search
uct_stat_territory
uct_value
uct_value_black
undo (*)
version (*)

Working with .sgf files:
- The GTP commands "loadsgf" and "savesgf" are useful for this. The argument
  these commands take is a path to the .sgf file to save or load. Due to the
  limitations of the GTP protocol, the filename cannot include spaces, hash
  signs (#), or control characters.
- If coding is involved, the classes SgGameReader and SgGameWriter in the
  SmartGo library will be useful

Determine if stones are captured as the result of a move, and which stones:
- The GTP command "list_stones" enumerates the positions that the specified
  player has stones on. If compared with the current board situation in
  Little Go, any differences indicate which stones have been captured.
- Although the GTP specification does not recommend it, the result of GTP
  command "showboard" could also be used to find any differences with the
  current board situation in Little Go.
- Implementing this myself should also be not too hard: Code an algorithm that
  finds finds out how many liberties a stone or a group has, then examine the
  four neighbours of the stone that was just placed.

Scoring
- Possibly useful GTP commands: final_score (GoUctCommands::CmdFinalScore),
  final_status_list (GoUctCommands::CmdFinalStatusList),
  uct_score (GoUctCommands::CmdScore)
- The main class in GoGui is CountScore (net.sf.gogui.go.CountScore.java)
  - m_score = Array with board x/y coordinates as indices; each array element
    has a GoColor Wert (BLACK/WHITE/EMPTY)
  - m_dead = Marker of size X (= board size, e.g. 19)
    - Marker is a one-dimensional array with boolean values
    - Each point on the board has a constant index value which is used to access
      the array element that corresponds to the point
    - The Marker array size is constant, the size is chosen so that even with
      the maximum board size each point always references a valid array element
      (maximum board size is 25, array size is 25x25 = 625)
  - compute() re-calculates the score after each change made by the user
  - The result of compute() is placed into m_score

Two computer players:
- The "genmove" GTP command has an argument that allows to specify the color
  to generate a move for
- This can be leveraged to effectively let Fuego play against itself

Recommend a move
- The "reg_genmove" GTP command generates a move, but does not play it

Setup a position
- The "gogui-setup" GTP command can be used to setup a position on the board
  without making play moves. For instance, an .sgf file saved after
  "gogui-setup" will not contain moves, just the board setup). This command
  exists because GTP v2 does not define such a command. The format is
  "gogui-setup <color> <vertex> [...]". The colors do not need to alternate.
- The "gogui-setup_player" command is used to define the color that should play
  first after a setup has been made. This command is submitted immediately
  after gogui-setup. The format is "gogui-setup_player <color>".
- The "gogui-play_sequence" GTP command uses the same format as "gogui-setup",
  but makes actual play moves. The player that should play first after the
  setup has been made is determined automatically (but can be changed using
  "gogui-setup_player").

Territory statistics
- The "uct_stat_territory" GTP command displays territory statistics
- For a detailed explanation of how to enable this, see
  http://sourceforge.net/apps/trac/fuego/wiki/ShowingTerritoryStatistics
- Apparently the result of this command is a percentage for each vertex, based
  on which the sizes of the squares in the screenshot on the above page are
  drawn
- For scoring one could also define a threshold percentage above which a vertex
  is counted as territory for a color

Interrupting long-running GTP commands
- A long-running GTP command such as "genmove" can be interrupted by sending
  the special string "# interrupt". Apparently this has been implemented in
  Fuego to accomodate the GoGui client. See chapter 10 in the GoGui manual for
  some details (http://gogui.sourceforge.net/doc/interrupt.html)
- Fuego also understands the GTP command "gogui-interrupt". The comments in
  Fuego's source code explain that this command does not actually do anything,
  its presence in the output of "list_commands" (another GTP command) merely
  indicates that this version of Fuego is capable of handling the string
  "# interrupt"
- Manual experimenting with the Fuego 1.1 engine reveals how "# interrupt" is
  handled
  - The string "# interrupt" is not a GTP command because it has no return
    value
  - Sending an interrupt causes the GTP engine to stop processing the current
    command. The GTP engine then prints the result of the interrupted command
    to the protocol stream.
  - Sending an interrupt if the engine is idle (i.e. not processing a command)
    simply does nothing
  - Sending an interrupt has no effect if anything else is already in the
    GTP engine's input buffer. This is best explained with an example:
    1) Submit "genmove W"
    2) Submit "genmove B"
    3) Send "# interrupt"
    Since "genmove B" is already in the engine's input buffer, the interrupt
    has no effect on "genmove W". After "genmove W" has been fully processed,
    the GTP engine will then start processing "genmove B". Again, the interrupt
    has no effect on "genmove B".
- Notes on interrupting a "genmove" command
  - The engine reports success for the command and actually generates a move
  - The question is: Which move is generated? Is it the best move so far, or
    just the last move that the search algorithm has been evaluating when it
    detected interruption?
  - Answer: From looking at the implementation of SgUctSearch::SearchOnePly() in
    SgUctSearch.cpp, it would appear that the best move so far is selected.

Ko rules
- The GTP command "go_param_rules ko_rule" can be used to set one of three
  different ko rules
  - simple: The simple ko rule where only repetition of the position two moves
    ago is forbidden.
  - pos_superko: Positional superko
  - superko: Situational superko (the source code documentation has the
    information that this is indeed situational superko)
- The default is positional superko
- Resources that explain what a superko is, and what the difference is between
  situational and positional superko
  - http://senseis.xmp.net/?Superko
  - http://en.wikipedia.org/wiki/Rules_of_Go#Repetition

Other useful stuff
- The "go_point_info" GTP command allows to query Fuego about various properties
  of the specified point. One of the properties is whether the point would be a
  legal move for either black or white
- The "is_legal" GTP command allows to query Fuego whether it would be legal for
  the specified player to play on the specified point


Details on Fuego's smartgame module
-----------------------------------
Classes
- SgNode represents a node in a tree structure
- SgProp represents a property of a node
- SgPoint represents a vertex on the board, but can also be used to refer to
  the "virtual" point of a pass move

Nodes and properties
- One node can have 0-n properties
- A property has a type (e.g. SG_PROP_MOVE)
  - The term that is used, though, is "ID" - a misnomer in my opinion.
  - SgPropID is the type used to store a property ID/type
  - SgProp::ID() is called to get at a property object's ID/type
- A property is additionally classified by (binary) flags that can be set or
  cleared on it
  - For instance, a property with ID SG_PROP_MOVE has set the flag
    SG_PROPCLASS_MOVE, and either SG_PROPCLASS_BLACK or SG_PROPCLASS_WHITE
    to indicate whether the move was made by the black or the white player
  - SgProp::Flag() returns a boolean value; the method is used to check whether
    a given flag is set on the property object

The node tree
- The terminology used by documentation and SgNode methods views the tree with
  the root node at the top, and the branches pointing downwards
- For instance
                                node0
                               /    \
                              /      \
                           node1     node2
                          /  |  \        \
                         /   |   \        \
                      node3 node4 node5   node6

- Looking at this example, and at the methods in SgNode, one can say that
  - node0->IsRoot() == true
  - node1->Father() == node0
  - node1->RightBrother() == node2
  - node1->LeftBrother() == NULL
  - node6->HasBrother() == false
  - node5->NumLeftBrothers() == 2
  - node1->NumSons() == 3
  - node1->LeftMostSon() == node3
  - node1->RightMostSon() == node5
  - SgNode::IsTerminal() == true for node3, node4, node5 and node6
  - SgNode::IsBranchPoint() == true for node0 and node1
  - SgNode::IsOnMain() == true for node0, node1 and node3

Code snippets:

void inspectProp(SgProp* prop)
{
  SgPropID propID = prop->ID();
  std::string propLabel = prop->Label();
  bool black = prop->Flag(SG_PROPCLASS_BLACK);
  bool white = prop->Flag(SG_PROPCLASS_WHITE);
  bool info = prop->Flag(SG_PROPCLASS_INFO);
  bool anno = prop->Flag(SG_PROPCLASS_ANNO);
  bool stat = prop->Flag(SG_PROPCLASS_STAT);
  bool move = prop->Flag(SG_PROPCLASS_MOVE);
  bool mark = prop->Flag(SG_PROPCLASS_MARK);
  NSLog(@"propID = %d, propLabel = %s, black = %d, white = %d, info = %d, anno = %d, stat = %d, move = %d, mark = %d",
        propID, propLabel.c_str(), black, white, info, anno, stat, move, mark);
}

void inspectNode(SgNode* node)
{
  bool hasFather = node->HasFather();
  bool isRoot = node->IsRoot();
  bool hasLeftFather = node->HasLeftBrother();
  bool hasRightBrother = node->HasRightBrother();
  bool hasSon = node->HasSon();
  bool hasBrother = node->HasBrother();
  bool isOnMain = node->IsOnMain();
  NSLog(@"hasFather = %d, isRoot = %d, hasLeftFather = %d, hasRightBrother = %d, hasSon = %d, hasBrother = %d, isOnMain = %d",
        hasFather, isRoot, hasLeftFather, hasRightBrother, hasSon, hasBrother, isOnMain);
  const SgPropList& propList = node->Props();
  SgPropListIterator propListIterator(propList);
  while (propListIterator)
  {
    SgProp* prop = *propListIterator;
    inspectProp(prop);
    ++propListIterator;
  }
}


Go topics
---------
Collection of computer Go algorithms:
- http://senseis.xmp.net/?ComputerGoAlgorithms

Scoring
- http://senseis.xmp.net/?Scoring
- http://senseis.xmp.net/?TerritoryAndAreaScoring
- http://senseis.xmp.net/?InternationalRules

Benson's Algorithm
- http://senseis.xmp.net/?BensonSAlgorithm
- http://senseis.xmp.net/?BensonsDefinitionOfUnconditionalLife%2FExamples
- Fuego's GTP command for this is "go_safe_gfx benson". The result simply lists
  all points for each color that are unconditionally alive. The client needs to
  find out itself which points are connected. The result of the GTP command
  looks like this:

= BLACK F1 G1 H1 J1 F2 G2 H2 J2 F3 G3 H3 B5 C5 D5 E5 A6 B6 C6 A7 B7 C7 D7 A8 B8 C8 A9 B9 C9
WHITE E8 F8 G8 H8 J8 E9 F9 G9 H9 J9
COLOR #980098 D8 D9
CIRCLE E7 D8 D9
TEXT Solver: benson  B: 28 (34 %)  W: 10 (12 %)  Both: 38 (46 %)  Regions: 7

  It is not clear what the CIRCLE and COLOR lines mean (probably is related to
  displaying graphics). If one color has no points, the result looks like this:

= BLACK F1 G1 H1 J1 F2 G2 H2 J2 F3 G3 H3 B5 C5 D5 E5 A6 B6 C6 A7 B7 C7 D7 A8 B8 C8 A9 B9 C9
WHITE
COLOR #980098 D8 D9
CIRCLE E7 D8 D9
TEXT Solver: benson  B: 28 (34 %)  W: 10 (12 %)  Both: 38 (46 %)  Regions: 7


Fuego playing strength
----------------------
Essential parameters for modifying Fuego's playing strenght are described here:
  https://sourceforge.net/apps/trac/fuego/wiki/FAQ1
  https://sourceforge.net/apps/trac/fuego/wiki/FAQ3

Summary
- With "Reuse subtree" enabled, Fuego does not discard results from a previous
  search. "Reuse subtree" by default is enabled. Enable "reuse subtree" with
  "uct_param_player reuse_subtree 1".
- Pondering allows Fuego to think during opponent's turn. Pondering requires
  "Reuse subtree" to be enabled. Pondering by default is disabled. Enable
  pondering with "uct_param_player ponder 1".
- Fuego will stop pondering after a certain time. By default this limit is set
  to 300 seconds. Set the pondering limit (in seconds) with
  "uct_param_player max_ponder_time 300".
- More memory allows Fuego to store more nodes and to keep more results around,
  making calculations more accurate. Instead of the amount of memory, it is also
  possible to change the number of nodes. Changing the amount of memory
  automatically adjusts the number of nodes, and vice versa. Set the available
  memory (in bytes) with "uct_max_memory 500000000". Set the number of nodes
  with "uct_param_search max_nodes 6000000".
- More search time gives Fuego a better chance to find good moves. By default
  the time limit for searching is set to 10 seconds. Set the time available for
  searching with "go_param timelimit 6.5". Remove the time limit entirely with
  "uct_param_player ignore_clock 1" (not advisable, this will send the search
  algorithm on a mission to fry your CPU). An active GTP client might also
  interrupt a search in progress (due to a "genmove" GTP command) by sending
  the string "# interrupt" to the GTP engine.
- More games gives Fuego a better chance to find good moves. By default there
  is no limit for this setting (or more accurate: the maximum allowable value
  for a double, which is 1.79769e+308 on a Mac). Change this setting with
  "uct_param_player max_games 123456".

Copy & paste templates:
- Start Fuego
  ~/Documents/dev/littlego/3rdparty/install/Developer/SDKs/MacOSX10.6.sdk/bin/fuego
- Observe Fuego's memory usage with "top". The following example refers to the
  Mac OS X 10.6 version of the "top" command.
  top -stats pid,command,rsize,vsize,rshrd,rprvt,vprvt -pid 54439
- GTP commands
  uct_param_player ponder 1
  uct_max_memory 500000000
  uct_param_player reuse_subtree 1
  loadsgf /Users/patrick/Documents/go-games/19x19/pw6-gokifu-20110915-Choi_Cheolhan-Kim_Kiyoung.sgf


Fuego resigning mechanics
-------------------------
- The resigning behaviour is modified by these two GTP commands:
  - uct_param_player resign_min_games <xxx>
  - uct_param_player resign_threshold <xxx>
- resign_min_games
  - From the source code docs: "Minimum number of simulations to check for
    resign."
  - This comment allows some interpretation, so additional source code is
    required
  - Result: The number of playouts must be greater than (>) resign_min_games
    for resignation to become possible
  - Consequence: If the "max_games" parameter falls below resign_min_games,
    resignation becomes impossible because the required number of playouts can
    never be reached
- resign_threshold
  - From the source code docs: "Threshold for position value to resign."
  - This comment allows some interpretation, so additional source code is
    required
  - Result: A search yields a "best move". The quality of the move is valued
    between 0 and 1. A higher value means that the move is better. The quality
    of the best move must be smaller than (<) resign_threshold for resignation
    to become possible.
- The computer resigns the game only if the conditions for both resign_min_games
  and resign_threshold are met
- Experiment: Setting resign_threshold to 1 causes Fuego to resign immediately
  once it no longer plays moves from the opening book
- Default values
  - The default value for resign_threshold is automatically adjusted when the
    board size changes:
    - Board size < 15 : The default value is 0.05
    - Board size >= 15 : The default value is 0.08
    The source comment for this is
      // Need higher resign threshold, because GoUctGlobalSearch uses
      // length modification on large board
  - At the time of writing, the default value for resign_min_games is always
    5000 (board size has no influence)
- resign_min_games, and possibly resign_threshold also, have an influence on
  the "early_pass" behaviour of the UCT player


Fuego territory statistics
--------------------------
Cf. http://sourceforge.net/apps/trac/fuego/wiki/ShowingTerritoryStatistics
- First, switch on the collection of territory statistics in Fuego with the
  following GTP command:
  uct_param_globalsearch territory_statistics 1
- Data collection starts when the next search is made. This happens when
  - A move is made
  - Pondering is on and Fuego searches in the background
  - A search is triggered purely for the purpose of data collection, for
    instance with this GTP command:
    reg_genmove B
  No search is made when a move from the opening book is selected.
- Statistics can be obtained from Fuego with this GTP command:
    uct_stat_territory
- The command fails if no statistics are available. The command succeeds even if
  the statistics do not reflect the current board position. Two common examples
  where this happens is when one of the GTP commands "clear_board" or
  "gogui-play_sequence" is sent: The statistics in this case will reflect the
  board position before the board-changing GTP command was sent.
- The result of "uct_stat_territory" is a 2D matrix of decimal values. The
  matrix dimensions correspond to the dimensions of the Go board. Each matrix
  element (i.e. each decimal value) corresponds to an intersection on the board.
- A decimal value represents the percentage of playouts that ended up with
  the corresponding intersection being territory for one of the two colors:
  - A positive value means that the intersection ended up as black territory
    more frequently than it ended up as white territory
  - A negative value means that the intersection ended up as white territory
    more frequently than it ended up as black territory
- Decimal values range from -1.0 (always white) to +1.0 (always black)


Scoring and counting
--------------------
The difference between scoring and counting
- The terms "scoring" and "counting" are often used interchangeably (e.g.
  "chinese scoring", "chinese counting") when in fact the two are different
  things.
- The scoring system in use determines *what* counts. For instance, do captured
  stones count? Do occupied intersections count?
- The counting method in use determines *how* the count is made. For instance,
  with territory scoring you can either add captured stones to the score of the
  capturing player, or you can subtract captured stones from the score of the
  player who owns the stones.
- The scoring system has an influence on how the game is played and is part of
  the game rules.
- Using different counting methods may yield different scores, but the winning
  player always remains the same.

Glossary
- Territory = Empty intersections surrounded by the stones of a color
- Area = Intersections occupied by the stones of a color

Territory scoring
- The basic rules of this scoring system are
  - Remove dead stones from the board, adding them to the already captured
    stones
  - Start the score with your territory (excluding territory surrounded in Seki)
  - Subtract the number of your stones that were captured by the opponent (this
    includes the dead stones that were initially removed from the board)
  - Add Komi (for white only)
- The basic rules allow negative scores, so there are variations how to count
  captured stones
  - Japanese counting (http://senseis.xmp.net/?JapaneseCounting): Subtract only
    as many captured stones until you reach zero. Any surplus captured stones
    are then added to the opponent's score. For the white player, Komi is added
    *after* handling captured stones.
  - Little Go: Instead of subtracting captured stones from the owning player's
    score, simply add them to the opponent's score. This makes sure that no
    negative scores can occur, but it will result in overall higher scores.
- Handicap has no effect on the score under Territory scoring rules
- Komi for non-handicap games is 6.5

Area scoring
- The basic rules of this scoring system are
  - Remove dead stones from the board, giving them back to the owning player
  - Start the score with your territory (including territory surrounded in Seki)
  - Add the number of stones of your color on the board
  - Add Komi (for white only)
  - Add compensation for handicap stones (for white only)
- There are a few variations how to count handicap
  - The basic goal always is to compensate white for the area occupied by the
    handicap stones
  - Chinese counting: For a handicap with n stones, black subtracts n/2 from his
    score, white adds n/2 to his score.
  - AGA (American Go Association) counting: For a handicap with n stones, white
    adds n-1 to his score.
- Komi for non-handicap games is 7.5

Links & resources
- http://senseis.xmp.net/?Scoring
  - Has basic rules for the two scoring systems
- http://senseis.xmp.net/?TerritoryAndAreaScoring
  - Compares the two scoring systems
  - Mentions the n/2 handicap compensation in reference to the Chinese counting
    method
  - Also mentions the AGA handicap compensation system
- http://senseis.xmp.net/?ChineseCounting
  - The counting method most often used for area scoring
  - Mentions handicap compensation in a rather ambiguous way
- http://senseis.xmp.net/?JapaneseCounting
  - The counting method most often used for territory scoring
- http://senseis.xmp.net/?Komi
  - Explains which Komi should be used for the different scoring systems
- http://www.britgo.org/rules/compare.html
  - Good comparison of different Go rulesets, including some clarification
    regarding the handling of handicap compensation

GTP commands involved in scoring
- go_param_rules japanese_scoring
  - This is the main command that distinguishes between area scoring (parameter
    value = 0) and territory scoring (parameter value = 1)
- go_param_rules capture_dead
  - Somewhere in the Fuego source code the parameter is documented like this:
      "Whether it necessary to capture dead stones. With some rules all
      un-captured stones count as alive."
  - The rules for neither area nor territory scoring mandate that un-captured
    stones count as alive
  - Therefore the capture_dead parameter must be set to 0 (= turned off)
  - 0 is already the default value, so no GTP command must be sent
- uct_param_player early_pass
  - The meaning of this parameter is not fully understood
  - According to this fuego-devel post [1], early_pass = 1 may be helpful when
    territory scoring is active
  - This Fuego wiki page [2] also mentions early_pass, however the main purpose
    of the parameter supposedly is "to annoy human opponents less with
    meaningless moves in the end game."
  - Since I can't see the exact meaning of the parameter in connection to the
    scoring system, I just stick to its intended meaning and leave it at its
    default value 1 (= turned on)

[1] https://sourceforge.net/mailarchive/message.php?msg_id=31365068
[2] https://sourceforge.net/apps/trac/fuego/attachment/wiki/JapaneseRules/%5Bfuego-devel%5D%20Supported%20Go%20rules.txt


Redesigning the drawing mechanism in PlayView
---------------------------------------------
During development of version 0.8 I decided to revise the implementation of how
the PlayView class is drawing the Go board. The rationale for this is that the
current implementation is extremely simple and brute force: Whenever an update
is required, the entire board is re-drawn from scratch. This brute force
approach has the potential to consume too much CPU power and thus to reduce
battery life. Since there already is some optimization in place that tries to
coalesce multiple update cycles into one (e.g. while loading a game), the main
area affected by constant redrawing is when the user wants to place a stone and
is panning around the board.

So the first thing I am planning to do is to measure with Instruments.app on a
real device how much CPU power is consumed during a panning session. This will
be the benchmark that the new implementation must improve.

Ideas for the new implementation
- Pre-calculate coordinates of points, lines, edges, etc. only once when the
  bounds of the view change (e.g. when it is drawn for the first time, or after
  an interface orientation change) or when the board size changes. Currently
  those coordinates are calculated from scratch each time the view is drawn.
- The new implementation must be smart: It must be capable of deciding which
  parts of the board need to be updated in reaction to a specific event. We
  will therefore need to revisit the various events that can affect how the
  board is drawn, and define for each event what parts of the board are
  affected, and how.
- Layers
  - Conceptually, the PlayView main drawing method drawRect:() already splits
    drawing tasks into separate layers (e.g. first draw the board, then draw the
    lines on top, then draw the star points on top, etc.). It is probably a good
    idea to create real layers using QuartzCore, instead of just doing layers in
    concept.
  - With layers, the smart new implementation will be able to conclude from a
    specific event which layers need to be changed, instead of redrawing all
    layers.
  - A simple version of the layering solution will still update an entire layer
    whenever that layer needs to be changed, even if the change affects only a
    small rectangle.
- Rectangles
  - The UIKit drawing concept sees the view as a simple 2-D plane, not as a set
    of stacked layers, and is based on updating rectangles within that plane.
  - To make use of this concept, the smart new implementation will be able to
    conclude from a specific event which partial rectangles need to be updated,
    instead of updating the entire view rectangle.
  - A simple version of the rectangle-based solution will update the partial
    rectangles in all layers, even if the change affects only one or two layers.
- The ultimate smart solution will be able to combine the two approaches: When
  an event occurs, it will determine 1) which layers, and 2) which rectangles
  are affected by the event, then it will update only those things that really
  need to be changed.

Things that should also be kept in mind:
- What about the optimization approach where one creates an image that can then
  be used as a canvas to draw on? Does it make sense to create such an image for
  those parts of the Go board that are relatively static (i.e. stuff that
  changes only with board size) and to combine the image with layers?
- Is it necessary to take into account that in the future the app might support
  zooming the Go board?


Benchmark results
- Set up the user defaults with a 19x19 board for new games, two human
  players, and the default profile set not to use pondering (to eliminiate all
  interference by Fuego)
- Kill all applications to eliminate other outside interference
- Start Instruments, then wait a moment until system activity dies down before
  starting to pan
- Note that during the entire test on all devices the system load is always 0%,
  only user load appears to be relevant
- The 5 sampling actions are
  - User load for the idle system (i.e. before beginning with the test) between x% and y%
  - Starting to pan lets the user load quickly rise to x-y%
  - When wildly panning, user load is constantly above a certain threshold x%, peaking at y%
  - When panning normally, user load is between x and y%
  - Placing the stone lets the user load go back down to the original x-y%

                                    Idle   Start     Wildly             Normal    Placing
                                    load   panning   panning            panning   stone
----------------------------------------------------------------------------------------
Original implementation (build from commit c2566ce86b5ccad0e3eb2f7c671fb2df5e0e3747)
  iPhone 3GS                        7-8%   70-80%    >90% (peak 98%)    48-62%    7-8%
  iPad 2, landscape                 2-4%   30%       >60% (peak 74%)    20-27%    2-4%
CALayer with pre-rendered CGLayers and animations (build from commit 4ea840c51f7307519fd54f1dca735c8e496b3371)
  iPhone 3GS                        7-8%   30-38%    >95% (peak 100%)   58-80%    7-8%
  iPad 2, landscape                 2-5%   15-25%    >60% (peak 68%)    27-36%    2-4%
CALayer with pre-rendered CGLayers, no animations (build from commit a29292250c102646335c9253bbccfbd1b13ab4fa)
  iPhone 3GS                        7-9%   16-26%    73-89% (peak 92%)  33-53%    6-8%
  iPad 2, landscape                 2-5%   9-15%     49-55%             15-22%    2-5%


Layers in their order of stacking
- Grid
  - This layer draws the grid lines on whose intersections stones are placed
- Coordinates
  - This layer draws the grid coordinate labels (A-T, 1-19)
  - This layer could possibly be merged with the grid layer
- Star Points
  - This layer marks up special intersections called star points (or hoshi, to
    use the Japanese term)
  - This layer could possibly be merged with the grid layer
- Cross-hair lines
  - This layer draws the cross-hair lines that indicate to the user during stone
    placement where the stone would be placed
  - This layer must be drawn at a different y-position than the cross-hair
    stone layer because normal stones should paint over cross-hair lines
- Stones
  - This layer draws the stones that have been placed during the current game
- Cross-hair stone
  - This layer draws the cross-hair stone that indicates to the user during
    stone placement where the stone would be placed
  - This layer cannot be at the top of the stack because we want symbols to be
    drawn on top of the cross-hair stone
- Symbols
  - This layer draws various symbols to mark up stones
  - Examples are: Last move, move numbers
  - This layer is hidden in Scoring mode
- Territory
  - This layer marks up territory in Scoring mode
  - This layer is shown only in Scoring mode
- Dead stones
  - This layer marks up dead stones in Scoring mode
  - This layer is shown only in Scoring mode


Events                                   Affected layer       Required change
----------------------------------------------------------------------------------
MarkLastMoveChanged                      Symbols              0-1 rectangles for the last stone that was placed
DisplayCoordinatesChanged                iPad: Coordinates    4 rectangles on all board sides that contain the labels
                                         iPhone: All layers   On iPhone we must resize the board
DisplayMoveNumbersChanged                Symbols              0-n rectangles, one for each stone that is placed
InconsistentTerritoryMarkupTypeChanged   Territory            Entire layer
CrossHairChanged                         Cross-hair           A set of rectangles to remove the old and draw the new cross-hair
GoGameDidCreate                          All layers           Entire layers (a new game might include a board size change)
playViewBoardPositionChanged             Stones               1-n rectangles, for a stone being placed + stones being captured/replaced
                                         Symbols              Update last move marker
GoScoreScoringEnabled                    Symbols              Hide layer
                                         Territory            Show layer
                                         Dead Stones          Show layer
GoScoreScoringDisabled                   Symbols              Show layer
                                         Territory            Hide layer
                                         Dead Stones          Hide layer
GoScoreCalculationEnds                   Territory            Update entire layer
                                         Dead Stones          Update entire layer
InterfaceRotationChanged                 All layers           Update entire layer (space available for drawing changes)

(note that this table may no longer be up-to-date)


Memory usage after adding zooming
---------------------------------
The following measurements were taken with the "Activity Monitor" instrument for
a release build on an iPhone 3GS. Unless otherwise noted (towards the end of
the table), measurements were taken while running a human vs. human game, with
the default GTP engine profile configured to have pondering disabled; in other
words: Fuego didn't use up any memory.

Memory usage   Situation
----------------------------------------------------
47.38 MB       After application launch, empty 19x19 board
50.18 MB       While panning around the board
50.38 MB       After placing the first stone
52.16 MB       After starting a new 19x19 game
53.79 MB       While panning around the board
51.49 MB       After placing the first stone
52.25 MB       After starting a new 19x19 game
53.88 MB       While panning around the board
51.55 MB       After placing the first stone
51.89 MB       After switching to the Archive tab
51.53 MB       After loading the Ear-redding game (325 moves on a 19x19 board)
53.93 MB       While panning around the board
54.61 MB       After zooming in to the maximum zoom scale (3.0)
77.02 MB       While panning around the zoomed part of the board. Memory usage
               remains at this value even after cancelling the gesture.
62.21 MB       After scrolling around for a while, memory usage suddenly drops
               to this value.
76.45 MB       While panning around another zoomed part of the board.
62.20 MB       Memory usage drops to this value on its own, i.e. I don't have
               to do any scrolling.
49.98 MB       After zooming out to normal zoom scale (1.0)
52.52 MB       After starting a new 19x19 game
52.60 MB       After zooming in to the maximum zoom scale (3.0)
74.27 MB       While panning around the zoomed part of the board
60.29 MB       Memory usage drops to this value on its own after placing the
               stone and waiting for some time
50.16 MB       After zooming out to normal zoom scale (1.0)
53.20 MB       After zooming in to the maximum zoom scale (3.0)
51.61 MB       Place a few stones while zoomed in, then zoom out, then zoom in
               again, scroll and wait a few moments
50.73 MB       After loading the Ear-reddening game, then zooming in to zoom
               scale 1.5 (double-tap)
55.30 MB       While panning at zoom scale 1.5
51.98 MB       After zooming in to zoom scale 2.25 (double-tap)
64.03 MB       While panning at zoom scale 2.25
89.17 MB       This value is the last sample taken before the app crashes. The
               setup that leads to the crash: Default profile settings (i.e.
               32 MB memory for Fuego, pondering enabled), Ear-reddening game
               loaded, zoom in to zoom scale 3.0.
110.19 MB      Same setup, this time the app does not crash, even while panning
               at zoom scale 3.0.

Additional measurements
- Similar actions with a 9x9 board yield roughly the same memory usage
- Memory usage with the maximum setup on other devices
  - iPhone 4S (retina display): 115.20 MB
  - iPad 2nd generation (normal display): 103.36
- Memory usage on iPhone 3GS after coordinate labels were implemented
  - When the labels are not visible at zoom scale 1.0, memory usage is about the
    same as before
  - When zoomed in to the maximum zoom scale 3.0, an additional 1 MB of memory
    is used
- Memory usage on iPhone 3GS, with coordinate labels at maximum zoom scale 3.0,
  but without the wooden background image
  - When Fuego does not use any memory: An additional 2 MB of memory is used.
  - When Fuego is pondering and has 32 MB memory at its disposition: The app
    uses 11 MB of memory less.

Conclusions
- The board size is not relevant, but the view size is
- It also doesn't matter much whether or not any stones are on the board
- Zooming in to the maximum zoom scale (3.0) is relatively cheap (~ 2-3 MB)
- Having a retina display is also less expensive than expected: A mere
  additional ~5 MB when compared to the normal display.
- The most expensive operation is panning at high zoom scales (~ 22-23 MB at
  zoom scale 3.0). Memory usage drops dramatically when panning at medium zoom
  scales, but is still significant (~ 5 MB at zoom scale 1.5, ~ 12 MB at zoom
  scale 2.25).
- The iPhone 3GS behaves somewhat erratically: Once the app crashed when it
  merely used 89 MB of memory, the second time everything worked well even when
  the app used a generous 110 MB. It can probably be said that the iPhone 3GS,
  and with it all the other devices that only have 256 MB RAM (iPad 1st
  generation, iPod Touch 3rd and 4th generation) are a bit overtaxed when the
  app's memory consumption suddenly jumps up by 25-40 MB. Newer devices,
  however, should be fine since they all have 512 MB RAM or more (cf. [1]).
- The numbers regarding the wooden background image contradict each other.
  Another measurement should be made where it is possible to dynamically turn
  on/off the background image, i.e. without having to recompile the app.

[1] http://en.wikipedia.org/wiki/List_of_iOS_devices


Application launch times when restoring from NSCoding archive
-------------------------------------------------------------
The following measurements were taken with the "Time Profiler" instrument for
a release build on an iPhone 3GS and an iPad 2. For each measurement, 3 values
were recorded:

1. GtpEngine startup: How much time did it take for the GtpEngine main loop to
   start up. This includes how much time it takes for Fuego to set up its
   internals. Because the GtpEngine main loop runs in a secondary thread, this
   time cannot be simply added to the other times to get at the full application
   launch time as perceived by the user. There is a certain amount of
   parallelism involved, which mainly depends on the capabilities of the
   device's processor.
2. UIApplication launch: How much time did it take for iOS to complete the
   launch cycle of the UIApplication main object. This number excludes the
   GtpEngine startup time (runs in parallel) and the SetupApplicationCommand
   execution time (runs after the UIApplication launch). Significant portions
   of the UIApplication launch time are:
   1) Loading of the main .nib file
   2) Some initial GUI stuff that I cannot identify any closer but which seems
      to have to do with a CoreAnimation transaction
   3) Creating the status bar
   4) Running the app delegate method application:didFinishLaunchingWithOptions:
   5) Running the app delegate method applicationDidBecomeActive:
3. SetupApplicationCommand: How long did it take for this command to execute.
   The significant part is, of course, RestoreGameCommand, whose respective
   significant portions are:
   1) Decoding the NSCoding archive
   2) Executing NewGameCommand

                                |               iPhone 3GS                     |               iPad 2
                                |  GtpEngine  UIApplication  SetupApplication  |  GtpEngine  UIApplication  SetupApplication
                                |  startup    launch         Command           |  startup    launch         Command
--------------------------------+----------------------------------------------+--------------------------------------------
Measurement 1                   |  2924 ms    1179 ms        62 ms             |  1312 ms    340 ms         27 ms
(19x19 game, only 1 move,       |                                              |
Fuego with playing strength 1)  |                                              |
                                |                                              |
Measurement 2                   |  3256 ms    1169 ms        157 ms            |  1540 ms    733 ms         69 ms
(ear-reddening game,            |                                              |
Fuego with playing strength 1)  |                                              |
                                |                                              |
Measurement 3                   |  3308 ms    1171 ms        156 ms            |  1541 ms    714 ms         67 ms
(ear-reddening game,            |                                              |
Fuego with playing strength 5)  |                                              |
                                |                                              |
Measurement 4                   |  3313 ms     999 ms        158 ms            |  1540 ms    432 ms         68 ms
(ear-reddening game,            |                                              |
Fuego with playing strength 1,  |                                              |
no HUD)                         |                                              |


The times for measurement 1 for the iPhone 3GS have been broken down a bit so
that the impact of certain setup tasks can be gauged:

- UIApplication launch, total time = 1179 ms
  - Loading of the main .nib file              = 256 ms
  - Some initial GUI stuff                     = 307 ms
  - Creating the status bar                    =  95 ms
  - application:didFinishLaunchingWithOptions: = 155 ms
    - setupCrashReporting = 79 ms
    - setupUserDefaults   = 23 ms
    - setting up the HUD  = 21 ms
  - applicationDidBecomeActive:                =  17 ms
    (the main part here is used up by ArchiveViewModel's updateGameList)
- SetupApplicationCommand, total time = 62 ms
  - Decoding the NSCoding archive = 29 ms
  - Executing NewGameCommand      = 13 ms
  - Other stuff                   = 12 ms

The conclusions:
- Restoring from an NSCoding archive is a huge leap forward. The time previously
  spent on loading the backup .sgf file, and restoring the board position
  (several seconds), has been reduced to a quite insignificant portion of the
  overall launch time. Even under the worst circumstances (large game in
  progress, slowest device), decoding the NSCoding archive and executing
  SetupApplicationCommand now takes less than 160 ms.
- A major factor contributing to the app launch time is the time it takes for
  Fuego to set up. There is not much that we can do here, but take comfort in
  the next observation...
- Device capabilities dramatically reduce launch time

All in all it can probably be said that the application launch problem has
been virtually eliminated, and that further time and effort for optimizing
should therefore be spent in other areas.
