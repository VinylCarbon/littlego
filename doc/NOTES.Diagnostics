Purpose of this document
------------------------
This document has notes on how to process bug and crash reports submitted by
users.


How to use the diagnostics information file sent as part of a bug report email
------------------------------------------------------------------------------
Preparation work
- Make sure to get the sources for the exact version of Little Go that the user
  had when he generated the diagnostics information file
- Make a debug build & run that build in the simulator version that most closely
  matches the user's device.
- Stop the app. This first run was just to make sure that the app bundle is
  installed in the simulator
- Locate the app bundle folder in the Finder. For instance, on my system with
  Xcode 4.2 and using the current 4.3 simulator the folder is located here:
  /Users/patrick/Library/Application Support/iPhone Simulator/4.3.2/Applications/5A454C1C-1339-494A-8CDD-9DBF1FCB85D6/Little Go.app
- Place a copy of the diagnostics information file into the
  "Library/Application Support" folder which is located parallel to the
  simulator app bundle

Run the debug build you made earlier in the preparation phase. The following
things will happen:
- The application delegate detects the presence of the diagnostics information
  file and performs the following special startup sequence
- RestoreBugReportUserDefaultsCommand is executed to restore user defaults
  that were extracted from the diagnostics information file
- User defaults are then loaded in the usual way
- RestoreBugReportApplicationStateCommand is executed instead of
  RestoreGameFromSgfCommand; more stuff is extracted from the diagnostics information
  file to bring the application back to the exact state it was in when
  diagnostics information file was generated

Once the application has launched you are ready to test & debug.


Crash Reporting
---------------
Little Go currently uses Crashlytics [1] for crash reporting.

Before Crashlytics, Little Go used the open source library QuincyKit for crash
reporting, but unfortunately that library fell into disrepair, so at some point
a replacement that supports modern iOS versions was required.

With the demise of QuincyKit there currently is no other open source solution
for crash reporting, or at least none that I know of. I selected Crashlytics
from a list of five contenders because it seems trustworthy, friendly and is
the only solution with (seemingly) no strings attached. For a bit more detail
read GitHub issue 293 ([2]).

IMPORTANT: If you are creating a clone of Little Go that you want to distribute
to the App Store, you must register with Crashlytics to get your own API key
and build secret. These pieces of information you have to store locally in
separate files required by the build process and - in the case of the API
key - also at runtime.

Crashlytics integration into the Little Go app hasn't been too difficult, thanks
to CocoaPods. The main things that I had to fiddle with were:

1) The build phase that submits the dSYM files to the Crashlytics servers. I
   modified the default shell script added by CocoaPods so that dSYM files are
   submitted only when an App Store distribution build is made. Furthermore, I
   modified the shell script so that it reads the Fabric API key and the Fabric
   build secret from external files.
2) The Info.plist. CocoaPods adds a dictionary with Fabric key/values to
   Info.plist. This dictionary contained the Fabric API key. I removed the API
   key and instead added some code to the AppDelegate launch process that reads
   the API key from the same external file as the dSYM submitting build phase.

[1] https://www.crashlytics.com/
[2] https://github.com/herzbube/littlego/issues/293
