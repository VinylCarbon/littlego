Purpose of this document
------------------------
This document has notes about the project's build process.


Xcode version
-------------
Since version 1.3.0, the current build should work out of the box for

  Xcode 7.3.1
  iOS base SDK 9.3

If you want to build with a different setup you will probably encounter errors.
The most important thing to keep in mind is that the Xcode project's base SDK
and deployment target versions must match the versions you have in your
script/build-env.sh file, and that the Xcode deployment target must match the
deployment target in the Podfile.

If your setup is newer, the build may or may not work, depending on how much
Apple changed the compiler toolchain inside Xcode. If the build does not work,
you are on your own to resolve the problem.

If your setup is older and the build does not work, you may find a solution by
looking at older versions of the build files in the Git repository. Here is a
list of configurations that have worked in the past:
- Xcode 3.?, iOS base SDK 4.2, available between 0.1 and 0.5
- Xcode 4.2, iOS base SDK 5.0, available between 0.6 and 0.7.x
- Xcode 4.3, iOS base SDK 5.1, available between 0.8.x and 0.9.x
- Xcode 4.5, iOS base SDK 6.0, available only for a short time during
  development of 0.10.0; the configuration can be found in commit
  2038191682762f8bd815b5ec8580b2d75fcea7f4
- Xcode 4.6, iOS base SDK 6.1, available between 0.10.x and 0.12.x
- Xcode 5.0.2, iOS base SDK 6.1, available in 1.0.x
- Xcode 5.1.1, iOS base SDK 7.1, available in 1.1.x
- Xcode 6.1.1, iOS base SDK 8.1, available in 1.2.x


Setting up Xcode with an older iOS base SDK
-------------------------------------------
When Apple releases a new version of Xcode, it always bundles the application
with a certain version of the iOS base SDK. Sometimes you want to use the new
version of Xcode, but continue to develop with an older version of the iOS base
SDK. These steps are an example how this can be achieved for Xcode 5.1.1 and
iOS base SDK 6.1 (Xcode 5.1.1 comes bundled with iOS base SDK 7.1).

1. Log in as a user with administrator privileges
2. Install both Xcode 5.1.1 and 4.6.3. You will work with Xcode 5.1.1, you need
   Xcode 4.6.3 solely as a source for the iOS 6.1 SDK.
3. Launch Terminal.app and execute these commands (adjust paths if your Xcode
   app bundles are named differently):
     sudo xcode-select -s /Applications/Xcode-5.1.1.app
     cd /Applications/Xcode-5.1.1.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs
     sudo cp -Rp /Applications/Xcode-4.6.3.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk .
4. Launch Xcode 5.1.1 and install the iOS 6.1 simulator
   (Preferences > Downloads).


Xcode build system configuration
--------------------------------
Important configuration settings in Xcode (both for the "Little Go" and the
"Unit tests" targets):
- IPHONEOS_DEPLOYMENT_TARGET = 8.1
  - This must match the deployment target in script/build-env.sh and in Podfile.
- FRAMEWORK_SEARCH_PATHS = "$(SRCROOT)/3rdparty/install"
  - This is required to find the Fuego and Boost frameworks.
  - Note that FRAMEWORK_SEARCH_PATHS serves both for header file inclusion and
    library linking. Traditional C/C++ has two separate settings for these:
    HEADER_SEARCH_PATHS and LIBRARY_SEARCH_PATHS.
- CLANG_ENABLE_MODULES = YES
  This is enabled project-wide so that #import statements for system frameworks
  automatically result in the respective framework being linked against. As a
  result there are far less entries in the "Link Binary with Libraries" build
  phase.
- GCC_PREPROCESSOR_DEFINITIONS = NDEBUG,LITTLEGO_NDEBUG (Release and Distribute_* configurations)
  GCC_PREPROCESSOR_DEFINITIONS = NDEBUG                 (Debug configuration)
  Note: The NDEBUG macro is required even for a debug build because the project
  links against a release build of Fuego. Because of this NDEBUG becomes useless
  for distinguishing between debug/release builds, so we need our own project
  specific macro, in this case named LITTLEGO_NDEBUG.
- The build configurations "Distribute_AdHoc" and "Distribute_AppStore" are
  duplicates of the "Release" build configuration, with the single exception of
  the code-signing identity (found in the "Code Signing" section). Whenever a
  change is made to one of the three configurations, the other two
  configurations must be kept in sync!
- The "Little Go" target has a "Run Script" build phase that automatically
  uploads dSYM files to Crashlytics when an App Store build is made. The
  Fabric API key and the build secret required to perform this upload are
  ***NOT*** part of the public source code - if you forked the project to
  create your own App Store build then you must register with Crashlytics and
  get your own API key and build secret.


Configuration settings for the "Unit tests" target
- All tests in this target are what Apple used to call "logic tests", i.e. unit
  tests that exercise more or less isolated classes. The test source code is
  built using the iOS Simulator SDK, and tests can be run within the simulator
  only, i.e. not on a real iOS device, and also not outside of the simulator
  (the latter differs from Xcode 4.x where it was possible to run tests without
  launching the simulator)
- All source code files that are unit tested must be added to the "Unit test"
  target so that they are built for that target.
- The build setting "Header Search Path" is set to the value "./src". Since the
  test sources are completely separated from the normal application sources, I
  don't want to deal with relative path issues for each #import statement. The
  application can be seen as third party software from the point of view of the
  unit test bundle.
- Because application source files depend on the presence of a prefix header,
  the "Unit test" target has to have the same "Prefix header" build settings
  as the main application target.
- Compiling ApplicationDelegate pulls in Fuego/Boost (via GTP classes)
  as dependencies. To prevent this, the "Unit test" target defines the
  preprocessor macro LITTLEGO_UNITTESTS. The effect is that certain #include
  statements and pieces of code are not compiled and the dependency on
  Fuego/Boost goes away.
- Compiling ApplicationDelegate also pulls in Fabric and Crashlytics as
  dependencies. For the unit test target this results either in a linker error
  because of undefined symbols (if the unit test target does not link against
  the two frameworks), or in a linker error because of duplicate symbols
  (if the unit test target *does* link against the two frameworks; the
  duplication of symbols probably occurs because the unit test target links
  against the main bundle, which already contains the Fabric and Crashlytics
  symbols). Since crash reporting is not required for unit tests, the simplest
  way to work around these issues was to let the code in the main bundle that
  works with Fabric and Crashlytics not compile when the preprocessor macro
  LITTLEGO_UNITTESTS is defined. The dependency on Fabric and Crashlytics thus
  goes away, in exactly the same as the dependency on Fuego/Boost.


Xcode schemes
-------------
Little Go's Xcode build schemes are stored in source control along with the
Xcode project itself. [1] has the answer how to achieve this. The following is
a short overview of how I configured those schemes:
- Let Xcode autocreate schemes. This results in one scheme for each of the
  project's targets.
- Remove the "Unit tests" scheme
- Rename the "Little Go" scheme to "Little Go Debug"
- Add the unit test target to the "Little Go Debug" scheme
- Enable the "Run" action for the unit test target.
- Make sure that the checkbox "Test" is checked only for the unit test target,
  but not for the main target. This allows to run the test action (Command + U)
  for the main target.
- Make sure that the "Profile" and "Archive" actions use the "Release" build
  configuration, and all other actions use the "Debug" build configuration
- Disable the "Archive" action
- Duplicate the "Little Go Debug" scheme, naming the new scheme "Little Go AdHoc
  Distribution". Enable the "Archive" command. Change all actions to use the
  "Distribute_AdHoc" build configuration.
- Ditto, but name the new scheme "Little Go AppStore Distribution" and let the
  actions use the "Distribute_AppStore" build configuration.

[1] http://stackoverflow.com/questions/7144316/adding-xcode-workspace-schemes-to-version-control


Platform notes
--------------
- The Xcode project is prepared to build Little Go both for iOS and for the
  iPhone Simulator.
- The base SDK is "Latest" so that a simple rebuild is sufficient after an
  Xcode upgrade.
- The deployment target is set to 8.1 so that the application keeps running on
  iOS 8.1 devices.


Upgrading the iOS SDK
---------------------
A few rough notes on what needs to be done when a new iOS SDK is installed on
the development machine:
- Delete (or backup) the 3rdparty folder
- Edit script/build-env.sh: Update the "Base SDK" variables to refer to the new
  SDK version that was just installed
- In Terminal.app, run script/build-3rdparty-software.sh to perform a full
  rebuild of all 3rdparty software packages
- If you haven't restarted Xcode, it might be a good idea to do so now
- In the Xcode project, rebuild the "Little Go" target
