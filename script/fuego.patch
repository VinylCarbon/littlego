diff -ruN fuego-1.0-original/fuegomain/FuegoMain.cpp fuego-1.0-new/fuegomain/FuegoMain.cpp
--- fuego-1.0-original/fuegomain/FuegoMain.cpp	2011-01-14 17:34:48.000000000 +0100
+++ fuego-1.0-new/fuegomain/FuegoMain.cpp	2011-03-03 22:22:12.000000000 +0100
@@ -3,201 +3,9 @@
     Main function for Fuego */
 //----------------------------------------------------------------------------
 
-#include "SgSystem.h"
-
-#include <iostream>
-#include <boost/foreach.hpp>
-#include <boost/format.hpp>
-#include <boost/filesystem/path.hpp>
-#include <boost/program_options/options_description.hpp>
-#include <boost/program_options/cmdline.hpp>
-#include <boost/program_options/variables_map.hpp>
-#include <boost/program_options/parsers.hpp>
-#include <boost/utility.hpp>
-#include "FuegoMainEngine.h"
 #include "FuegoMainUtil.h"
-#include "GoInit.h"
-#include "SgDebug.h"
-#include "SgException.h"
-#include "SgInit.h"
-
-using namespace std;
-using boost::filesystem::path;
-using boost::format;
-namespace po = boost::program_options;
-
-//----------------------------------------------------------------------------
-
-namespace {
-
-/** @name Settings from command line options */
-// @{
-
-bool g_noHandicap = false;
-
-bool g_noBook = false;
-
-bool g_quiet = false;
-
-int g_fixedBoardSize;
-
-int g_maxGames;
-
-string g_config;
-
-path g_programDir;
-
-const char* g_programPath;
-
-int g_srand;
-
-vector<string> g_inputFiles;
-
-// @} // @name
-
-/** Get program directory from program path.
-    @param programPath Program path taken from @c argv[0] in
-    @c main. According to ANSI C, this can be @c 0. */
-path GetProgramDir(const char* programPath)
-{
-    if (programPath == 0)
-        return "";
-    return path(programPath, boost::filesystem::native).branch_path();
-}
-
-void Help(po::options_description& desc, ostream& out)
-{
-    out << "Usage: fuego [options] [input files]\n" << desc << "\n";
-    exit(0);
-}
-
-void ParseOptions(int argc, char** argv)
-{
-    po::options_description normalOptions("Options");
-    normalOptions.add_options()
-        ("config", 
-         po::value<std::string>(&g_config)->default_value(""),
-         "execuate GTP commands from file before starting main command loop")
-        ("help", "Displays this help and exit")
-        ("maxgames", 
-         po::value<int>(&g_maxGames)->default_value(-1),
-         "make clear_board fail after n invocations")
-        ("nobook", "don't automatically load opening book")
-        ("nohandicap", "don't support handicap commands")
-        ("quiet", "don't print debug messages")
-        ("srand", 
-         po::value<int>(&g_srand)->default_value(0),
-         "set random seed (-1:none, 0:time(0))")
-        ("size", 
-         po::value<int>(&g_fixedBoardSize)->default_value(0),
-         "initial (and fixed) board size");
-    po::options_description hiddenOptions;
-    hiddenOptions.add_options()
-        ("input-file", po::value<vector<string> >(&g_inputFiles),
-         "input file");
-    po::options_description allOptions;
-    allOptions.add(normalOptions).add(hiddenOptions);
-    po::positional_options_description positionalOptions;
-    positionalOptions.add("input-file", -1);
-    po::variables_map vm;
-    try
-    {
-        po::store(po::command_line_parser(argc, argv).options(allOptions).
-                                     positional(positionalOptions).run(), vm);
-        po::notify(vm);
-    }
-    catch (...)
-    {
-        Help(normalOptions, cerr);
-    }
-    if (vm.count("help"))
-        Help(normalOptions, cout);
-    if (vm.count("nobook"))
-        g_noBook = true;
-    if (vm.count("nohandicap"))
-        g_noHandicap = true;
-    if (vm.count("quiet"))
-        g_quiet = true;
-}
-
-void PrintStartupMessage()
-{
-    SgDebug() <<
-        "Fuego " << FuegoMainUtil::Version() << "\n"
-        "Copyright (C) 2009-2011 by the authors of the Fuego project.\n"
-        "This program comes with ABSOLUTELY NO WARRANTY. This is\n"
-        "free software and you are welcome to redistribute it under\n"
-        "certain conditions. Type `fuego-license' for details.\n\n";
-}
-
-} // namespace
-
-//----------------------------------------------------------------------------
 
 int main(int argc, char** argv)
 {
-    if (argc > 0 && argv != 0)
-    {
-        g_programPath = argv[0];
-        g_programDir = GetProgramDir(argv[0]);
-        try
-        {
-            ParseOptions(argc, argv);
-        }
-        catch (const SgException& e)
-        {
-            SgDebug() << e.what() << "\n";
-            return 1;
-        }
-    }
-    if (g_quiet)
-        SgDebugToNull();
-    try
-    {
-        SgInit();
-        GoInit();
-        PrintStartupMessage();
-        SgRandom::SetSeed(g_srand);
-        FuegoMainEngine engine(g_fixedBoardSize, g_programPath, g_noHandicap);
-        GoGtpAssertionHandler assertionHandler(engine);
-        if (g_maxGames >= 0)
-            engine.SetMaxClearBoard(g_maxGames);
-        if (! g_noBook)
-            FuegoMainUtil::LoadBook(engine.Book(), g_programDir);
-        if (g_config != "")
-            engine.ExecuteFile(g_config);
-        if (! g_inputFiles.empty())
-        {
-            for(size_t i = 0; i < g_inputFiles.size(); i++)
-            {
-                string file = g_inputFiles[i];
-                ifstream fin(file.c_str());
-                if (! fin)
-                    throw SgException(format("Error file '%1%'") % file);
-                GtpInputStream in(fin);
-                GtpOutputStream out(cout);
-                engine.MainLoop(in, out);
-            }
-        }
-        else
-        {
-            GtpInputStream in(cin);
-            GtpOutputStream out(cout);
-            engine.MainLoop(in, out);
-        }
-    }
-    catch (const GtpFailure& e)
-    {
-        SgDebug() << e.Response() << '\n';
-        return 1;
-    }
-    catch (const std::exception& e)
-    {
-        SgDebug() << e.what() << '\n';
-        return 1;
-    }
-    return 0;
+    return FuegoMainUtil::FuegoMain(argc, argv);
 }
-
-//----------------------------------------------------------------------------
-
diff -ruN fuego-1.0-original/fuegomain/FuegoMainUtil.cpp fuego-1.0-new/fuegomain/FuegoMainUtil.cpp
--- fuego-1.0-original/fuegomain/FuegoMainUtil.cpp	2011-01-14 17:34:48.000000000 +0100
+++ fuego-1.0-new/fuegomain/FuegoMainUtil.cpp	2011-03-04 00:48:38.000000000 +0100
@@ -8,11 +8,26 @@
 
 #include <fstream>
 #include <sstream>
+#include <iostream>
+#include <boost/foreach.hpp>
+#include <boost/format.hpp>
+#include <boost/filesystem/path.hpp>
+#include <boost/program_options/options_description.hpp>
+#include <boost/program_options/cmdline.hpp>
+#include <boost/program_options/variables_map.hpp>
+#include <boost/program_options/parsers.hpp>
+#include <boost/utility.hpp>
+#include "FuegoMainEngine.h"
 #include "GoBook.h"
 #include "SgDebug.h"
+#include "GoInit.h"
+#include "SgException.h"
+#include "SgInit.h"
 
 using namespace std;
 using namespace boost::filesystem;
+using boost::format;
+namespace po = boost::program_options;
 
 //----------------------------------------------------------------------------
 
@@ -43,6 +58,150 @@
     return true;
 }
 
+/** @name Settings from command line options */
+// @{
+
+bool g_noHandicap = false;
+
+bool g_noBook = false;
+
+bool g_quiet = false;
+
+int g_fixedBoardSize;
+
+int g_maxGames;
+
+string g_config;
+
+path g_programDir;
+
+const char* g_programPath;
+
+int g_srand;
+
+vector<string> g_inputFiles;
+
+string g_inputPipe;
+
+string g_outputPipe;
+
+// @} // @name
+
+/** Get program directory from program path.
+    @param programPath Program path taken from @c argv[0] in
+    @c main. According to ANSI C, this can be @c 0. */
+path GetProgramDir(const char* programPath)
+{
+    if (programPath == 0)
+        return "";
+    return path(programPath, boost::filesystem::native).branch_path();
+}
+
+/** Check that @a option1 and @a option2 are not specified at the same time. */
+void MutuallyExclusiveOptions(const po::variables_map& vm,
+                              const char* option1, const char* option2)
+{
+    if (0 == vm.count(option1) || 0 == vm.count(option2))
+        return;
+    if (vm[option1].defaulted() || vm[option2].defaulted())
+        return;
+    if (g_inputPipe.empty() || g_inputFiles.empty())
+        return;
+    string errorMessage = "Options '" + string(option1)
+                          + "' and '" + string(option2)
+                          + "' cannot be specified at the same time.";
+    SgDebug() << errorMessage << std::endl;
+    throw exception();
+}
+
+void Help(po::options_description& desc, ostream& out)
+{
+    out << "Usage: fuego [options] [input files]\n" << desc << "\n";
+}
+
+/** Returns normally if no error occurred. Returns true if program should
+    continue running, false if program should be terminated (e.g.
+    because help was requested). In the latter case, exit code 0 should
+    be used.
+
+    Throws an exception of undefined type if any error occurs. The
+    program should be terminated in response using an exit code != 0. */
+bool ParseOptions(int argc, char** argv)
+{
+    po::options_description normalOptions("Options");
+    normalOptions.add_options()
+        ("config", 
+         po::value<std::string>(&g_config)->default_value(""),
+         "execuate GTP commands from file before starting main command loop")
+        ("help", "Displays this help and exit")
+        ("maxgames", 
+         po::value<int>(&g_maxGames)->default_value(-1),
+         "make clear_board fail after n invocations")
+        ("nobook", "don't automatically load opening book")
+        ("nohandicap", "don't support handicap commands")
+        ("quiet", "don't print debug messages")
+        ("srand", 
+         po::value<int>(&g_srand)->default_value(0),
+         "set random seed (-1:none, 0:time(0))")
+        ("size", 
+         po::value<int>(&g_fixedBoardSize)->default_value(0),
+         "initial (and fixed) board size");
+    po::options_description hiddenOptions;
+    hiddenOptions.add_options()
+        ("input-file", po::value<vector<string> >(&g_inputFiles),
+         "input file");
+    hiddenOptions.add_options()
+        ("input-pipe", po::value<string>(&g_inputPipe)->default_value(""),
+         "input pipe");
+    hiddenOptions.add_options()
+        ("output-pipe", po::value<string>(&g_outputPipe)->default_value(""),
+         "output pipe");
+    po::options_description allOptions;
+    allOptions.add(normalOptions).add(hiddenOptions);
+    po::positional_options_description positionalOptions;
+    positionalOptions.add("input-file", -1);
+    po::variables_map vm;
+    try
+    {
+        po::store(po::command_line_parser(argc, argv).options(allOptions).
+                                     positional(positionalOptions).run(), vm);
+        po::notify(vm);
+        MutuallyExclusiveOptions(vm, "input-file", "input-pipe");
+    }
+    catch (const std::exception& e)
+    {
+        SgDebug() << e.what() << '\n';
+        throw;
+    }
+    catch (...)
+    {
+        Help(normalOptions, cerr);
+        throw;
+    }
+    if (vm.count("help"))
+    {
+        Help(normalOptions, cout);
+        return false;
+    }
+    if (vm.count("nobook"))
+        g_noBook = true;
+    if (vm.count("nohandicap"))
+        g_noHandicap = true;
+    if (vm.count("quiet"))
+        g_quiet = true;
+    return true;
+}
+
+void PrintStartupMessage()
+{
+    SgDebug() <<
+        "Fuego " << FuegoMainUtil::Version() << "\n"
+        "Copyright (C) 2009-2011 by the authors of the Fuego project.\n"
+        "This program comes with ABSOLUTELY NO WARRANTY. This is\n"
+        "free software and you are welcome to redistribute it under\n"
+        "certain conditions. Type `fuego-license' for details.\n\n";
+}
+
 } // namespace
 
 //----------------------------------------------------------------------------
@@ -81,4 +240,96 @@
     return s.str();
 }
 
+int FuegoMainUtil::FuegoMain(int argc, char** argv)
+{
+    if (argc > 0 && argv != 0)
+    {
+        g_programPath = argv[0];
+        g_programDir = GetProgramDir(argv[0]);
+        try
+        {
+            bool okAndContinue = ParseOptions(argc, argv);
+            if (! okAndContinue)
+                return 0;
+        }
+        catch (const SgException& e)
+        {
+            SgDebug() << e.what() << "\n";
+            return 1;
+        }
+        catch (...)
+        {
+            return 1;
+        }
+    }
+    if (g_quiet)
+        SgDebugToNull();
+    try
+    {
+        SgInit();
+        GoInit();
+        PrintStartupMessage();
+        SgRandom::SetSeed(g_srand);
+        FuegoMainEngine engine(g_fixedBoardSize, g_programPath, g_noHandicap);
+        GoGtpAssertionHandler assertionHandler(engine);
+        if (g_maxGames >= 0)
+            engine.SetMaxClearBoard(g_maxGames);
+        if (! g_noBook)
+            FuegoMainUtil::LoadBook(engine.Book(), g_programDir);
+        if (g_config != "")
+            engine.ExecuteFile(g_config);
+
+        istream* pInputStream = &cin;
+        ifstream inputPipeStream;
+        if (! g_inputPipe.empty())
+        {
+          inputPipeStream.open(g_inputPipe.c_str());
+          if (! inputPipeStream)
+            throw SgException(format("Error input pipe '%1%'") % g_inputPipe);
+          pInputStream = &inputPipeStream;
+        }
+        ostream* pOutputStream = &cout;
+        ofstream outputPipeStream;
+        if (! g_outputPipe.empty())
+        {
+          outputPipeStream.open(g_outputPipe.c_str());
+          if (! outputPipeStream)
+            throw SgException(format("Error output pipe '%1%'") % g_outputPipe);
+          pOutputStream = &outputPipeStream;
+        }
+
+        if (! g_inputFiles.empty())
+        {
+            for(size_t i = 0; i < g_inputFiles.size(); i++)
+            {
+                string file = g_inputFiles[i];
+                ifstream fin(file.c_str());
+                if (! fin)
+                    throw SgException(format("Error file '%1%'") % file);
+                pInputStream = &fin;
+                GtpInputStream in(*pInputStream);
+                GtpOutputStream out(*pOutputStream);
+                engine.MainLoop(in, out);
+            }
+        }
+        else
+        {
+            GtpInputStream in(*pInputStream);
+            GtpOutputStream out(*pOutputStream);
+            engine.MainLoop(in, out);
+        }
+    }
+    catch (const GtpFailure& e)
+    {
+        SgDebug() << e.Response() << '\n';
+        return 1;
+    }
+    catch (const std::exception& e)
+    {
+        SgDebug() << e.what() << '\n';
+        return 1;
+    }
+    return 0;
+}
+
 //----------------------------------------------------------------------------
diff -ruN fuego-1.0-original/fuegomain/FuegoMainUtil.h fuego-1.0-new/fuegomain/FuegoMainUtil.h
--- fuego-1.0-original/fuegomain/FuegoMainUtil.h	2011-01-14 17:34:48.000000000 +0100
+++ fuego-1.0-new/fuegomain/FuegoMainUtil.h	2011-03-03 22:12:35.000000000 +0100
@@ -32,6 +32,10 @@
         If SVNREV is defined, ( SVNREV ) is added.
         If compiled in debug mode, " (dbg)" is added. */
     std::string Version();
+
+    /** Don't care whether Fuego is run from the command line, or invoked via
+        function call. */
+    int FuegoMain(int argc, char** argv);
 }
 
 //----------------------------------------------------------------------------
diff -ruN fuego-1.0-original/fuegomain/Makefile.am fuego-1.0-new/fuegomain/Makefile.am
--- fuego-1.0-original/fuegomain/Makefile.am	2011-01-14 17:34:48.000000000 +0100
+++ fuego-1.0-new/fuegomain/Makefile.am	2011-03-04 18:51:51.000000000 +0100
@@ -5,7 +5,7 @@
 FuegoMainEngine.cpp \
 FuegoMainUtil.cpp
 
-noinst_HEADERS = \
+nobase_pkginclude_HEADERS = \
 FuegoMainEngine.h \
 FuegoMainUtil.h
 
@@ -37,3 +37,18 @@
 -I@top_srcdir@/gouct
 
 DISTCLEANFILES = *~
+
+noinst_LIBRARIES = libfuego_main.a
+
+libfuego_main_a_SOURCES = \
+FuegoMainEngine.cpp \
+FuegoMainUtil.cpp
+
+libfuego_main_a_CPPFLAGS = \
+-DDATADIR='"@datadir@"' \
+-DABS_TOP_SRCDIR='"@abs_top_srcdir@"' \
+$(BOOST_CPPFLAGS) \
+-I@top_srcdir@/gtpengine \
+-I@top_srcdir@/smartgame \
+-I@top_srcdir@/go \
+-I@top_srcdir@/gouct
diff -ruN fuego-1.0-original/go/Makefile.am fuego-1.0-new/go/Makefile.am
--- fuego-1.0-original/go/Makefile.am	2011-01-14 20:30:35.000000000 +0100
+++ fuego-1.0-new/go/Makefile.am	2011-02-24 20:38:26.000000000 +0100
@@ -42,7 +42,7 @@
 GoTimeSettings.cpp \
 GoUtil.cpp
 
-noinst_HEADERS = \
+nobase_pkginclude_HEADERS = \
 GoAssertBoardRestored.h \
 GoAutoBook.h \
 GoBensonSolver.h \
diff -ruN fuego-1.0-original/gouct/Makefile.am fuego-1.0-new/gouct/Makefile.am
--- fuego-1.0-original/gouct/Makefile.am	2011-01-14 17:34:33.000000000 +0100
+++ fuego-1.0-new/gouct/Makefile.am	2011-02-24 20:38:30.000000000 +0100
@@ -13,7 +13,7 @@
 GoUctSearch.cpp \
 GoUctUtil.cpp
 
-noinst_HEADERS = \
+nobase_pkginclude_HEADERS = \
 GoUctBoard.h \
 GoUctBookBuilder.h \
 GoUctBookBuilderCommands.h \
diff -ruN fuego-1.0-original/gtpengine/Makefile.am fuego-1.0-new/gtpengine/Makefile.am
--- fuego-1.0-original/gtpengine/Makefile.am	2010-05-01 16:50:01.000000000 +0200
+++ fuego-1.0-new/gtpengine/Makefile.am	2011-02-24 20:38:37.000000000 +0100
@@ -5,7 +5,7 @@
 GtpInputStream.cpp \
 GtpOutputStream.cpp
 
-noinst_HEADERS = \
+nobase_pkginclude_HEADERS = \
 GtpEngine.h \
 GtpInputStream.h \
 GtpOutputStream.h
diff -ruN fuego-1.0-original/simpleplayers/Makefile.am fuego-1.0-new/simpleplayers/Makefile.am
--- fuego-1.0-original/simpleplayers/Makefile.am	2010-05-01 16:50:02.000000000 +0200
+++ fuego-1.0-new/simpleplayers/Makefile.am	2011-02-24 20:38:48.000000000 +0100
@@ -16,7 +16,7 @@
 SpSimplePlayer.cpp \
 SpUtil.cpp
 
-noinst_HEADERS = \
+nobase_pkginclude_HEADERS = \
 SpAveragePlayer.h \
 SpCapturePlayer.h \
 SpDumbTacticalPlayer.h \
diff -ruN fuego-1.0-original/smartgame/Makefile.am fuego-1.0-new/smartgame/Makefile.am
--- fuego-1.0-original/smartgame/Makefile.am	2011-01-21 11:30:14.000000000 +0100
+++ fuego-1.0-new/smartgame/Makefile.am	2011-02-24 20:38:53.000000000 +0100
@@ -50,7 +50,7 @@
 SgVectorUtil.cpp \
 SgWrite.cpp
 
-noinst_HEADERS = \
+nobase_pkginclude_HEADERS = \
 SgArray.h \
 SgArrayList.h \
 SgBookBuilder.h \
