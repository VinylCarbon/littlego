diff -ruN fuego-1.1-original/go/GoGtpEngine.cpp fuego-1.1-new/go/GoGtpEngine.cpp
--- fuego-1.1-original/go/GoGtpEngine.cpp	2011-03-05 12:09:01.000000000 +0100
+++ fuego-1.1-new/go/GoGtpEngine.cpp	2011-09-14 23:04:43.000000000 +0200
@@ -126,6 +126,8 @@
     Register("kgs-genmove_cleanup", &GoGtpEngine::CmdGenMoveCleanup, this);
     Register("kgs-time_settings", &GoGtpEngine::CmdKgsTimeSettings, this);
     Register("komi", &GoGtpEngine::CmdKomi, this);
+    Register("list_handicap", &GoGtpEngine::CmdListHandicap, this);
+    Register("list_moves", &GoGtpEngine::CmdListMoves, this);
     Register("list_stones", &GoGtpEngine::CmdListStones, this);
     Register("loadsgf", &GoGtpEngine::CmdLoadSgf, this);
     Register("play", &GoGtpEngine::CmdPlay, this);
@@ -614,6 +616,66 @@
     }
 }
 
+/** List handicap stones in no particular order.
+    The stones are listed in a single line using the format "stone stone ...".
+    For instance: D4, Q4, Q16, D16 */
+void GoGtpEngine::CmdListHandicap(GtpCommand& cmd)
+{
+  cmd.CheckArgNone();
+  const SgNode* handicapNode = GoNodeUtil::GetHandicapNode(m_game.CurrentNode());
+  if (! handicapNode)
+    return;
+  const SgPropID addBlackPropID = SG_PROP_ADD_BLACK;
+  if (handicapNode->HasProp(addBlackPropID))
+  {
+    SgPropAddStone* propAddStone = static_cast<SgPropAddStone*>(handicapNode->Get(addBlackPropID));
+    const SgVector<SgPoint>& handicapStoneList = propAddStone->Value();
+    bool isFirst = true;
+    for (SgVectorIterator<SgPoint> it(handicapStoneList); it; ++it)
+    {
+      SgPoint point = *it;
+      if (isFirst)
+        isFirst = false;
+      else
+        cmd << " ";
+      cmd << SgPointUtil::PointToString(point);
+    }
+  }
+}
+
+/** List moves in the order they were made.
+    The moves are returned in a single line using the format
+    "color move, color move, ...". For instance: B A7, W Q14, B pass, W pass */
+void GoGtpEngine::CmdListMoves(GtpCommand& cmd)
+{
+  cmd.CheckArgNone();
+ 
+  const SgNode& root = m_game.Root();
+  bool isFirst = true;
+  // Traverse the main line (assume that all move nodes are on this line)
+  SgNode* node = root.LeftMostSon();
+  while (node)
+  {
+    if (node->HasNodeMove())
+    {
+      if (isFirst)
+        isFirst = false;
+      else
+        cmd << ", ";
+      SgBlackWhite player = node->NodePlayer();
+      cmd << SgBW(player) << " ";
+      SgPoint point = node->NodeMove();
+      if (SG_PASS == point)
+        cmd << "pass";
+      else if (SG_RESIGN == point)
+        cmd << "resign";  // is this type of point ever matched?
+      else
+        cmd << SgPointUtil::PointToString(point);
+    }
+    node = node->LeftMostSon();
+  }
+}
+
 /** List stones on board.
     Mainly useful for regression tests to verify the board position.
     For compatibility with GNU Go's list_stones command, the points are
diff -ruN fuego-1.1-original/go/GoGtpEngine.h fuego-1.1-new/go/GoGtpEngine.h
--- fuego-1.1-original/go/GoGtpEngine.h	2011-03-05 12:09:01.000000000 +0100
+++ fuego-1.1-new/go/GoGtpEngine.h	2011-09-14 22:26:14.000000000 +0200
@@ -60,6 +60,8 @@
         - @link CmdGenMoveCleanup() @c kgs-genmove_cleanup @endlink
         - @link CmdKgsTimeSettings() @c kgs-time_settings @endlink
         - @link CmdKomi() @c komi @endlink
+        - @link CmdListHandicap() @c list_handicap @endlink
+        - @link CmdListMoves() @c list_moves @endlink
         - @link CmdListStones() @c list_stones @endlink
         - @link CmdLoadSgf() @c loadsgf @endlink
         - @link CmdName() @c name @endlink
@@ -95,6 +97,8 @@
     virtual void CmdIsLegal(GtpCommand&);
     virtual void CmdKgsTimeSettings(GtpCommand& cmd);
     virtual void CmdKomi(GtpCommand&);
+    virtual void CmdListHandicap(GtpCommand&);
+    virtual void CmdListMoves(GtpCommand&);
     virtual void CmdListStones(GtpCommand&);
     virtual void CmdLoadSgf(GtpCommand&);
     virtual void CmdName(GtpCommand&);
diff -ruN fuego-1.1-original/go/GoNodeUtil.cpp fuego-1.1-new/go/GoNodeUtil.cpp
--- fuego-1.1-original/go/GoNodeUtil.cpp	2011-01-23 19:35:06.000000000 +0100
+++ fuego-1.1-new/go/GoNodeUtil.cpp	2011-09-14 21:59:38.000000000 +0200
@@ -48,14 +48,23 @@
 
 int GoNodeUtil::GetHandicap(const SgNode* node)
 {
-    while (node != 0)
-    {
-        if (node->HasProp(SG_PROP_HANDICAP))
-            return node->GetIntProp(SG_PROP_HANDICAP);
-        node = node->Father();
-    }
+  node = GetHandicapNode(node);
+  if (node)
+    return node->GetIntProp(SG_PROP_HANDICAP);
+  else
     return 0;
 }
 
+const SgNode* GoNodeUtil::GetHandicapNode(const SgNode* node)
+{
+  while (node != 0)
+  {
+    if (node->HasProp(SG_PROP_HANDICAP))
+      return node;
+    node = node->Father();
+  }
+  return 0;
+}
+
 //----------------------------------------------------------------------------
 
diff -ruN fuego-1.1-original/go/GoNodeUtil.h fuego-1.1-new/go/GoNodeUtil.h
--- fuego-1.1-original/go/GoNodeUtil.h	2011-01-23 19:35:06.000000000 +0100
+++ fuego-1.1-new/go/GoNodeUtil.h	2011-09-14 20:21:00.000000000 +0200
@@ -34,6 +34,9 @@
     /** Find handicap that is valid for this node.
         Search parent nodes until a node with a handicap property is found. */
     int GetHandicap(const SgNode* node);
+  
+    /** Search parent nodes until a node with a handicap property is found. */
+    const SgNode* GetHandicapNode(const SgNode* node);
 }
 
 //----------------------------------------------------------------------------
